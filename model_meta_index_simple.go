/*
Zinc Search engine API

Zinc Search engine API documents https://zincsearch-docs.zinc.dev

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the MetaIndexSimple type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MetaIndexSimple{}

// MetaIndexSimple struct for MetaIndexSimple
type MetaIndexSimple struct {
	Mappings    map[string]interface{} `json:"mappings,omitempty"`
	Name        *string                `json:"name,omitempty"`
	Settings    *MetaIndexSettings     `json:"settings,omitempty"`
	ShardNum    *int32                 `json:"shard_num,omitempty"`
	StorageType *string                `json:"storage_type,omitempty"`
}

// NewMetaIndexSimple instantiates a new MetaIndexSimple object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMetaIndexSimple() *MetaIndexSimple {
	this := MetaIndexSimple{}
	return &this
}

// NewMetaIndexSimpleWithDefaults instantiates a new MetaIndexSimple object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMetaIndexSimpleWithDefaults() *MetaIndexSimple {
	this := MetaIndexSimple{}
	return &this
}

// GetMappings returns the Mappings field value if set, zero value otherwise.
func (o *MetaIndexSimple) GetMappings() map[string]interface{} {
	if o == nil || IsNil(o.Mappings) {
		var ret map[string]interface{}
		return ret
	}
	return o.Mappings
}

// GetMappingsOk returns a tuple with the Mappings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MetaIndexSimple) GetMappingsOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Mappings) {
		return map[string]interface{}{}, false
	}
	return o.Mappings, true
}

// HasMappings returns a boolean if a field has been set.
func (o *MetaIndexSimple) HasMappings() bool {
	if o != nil && !IsNil(o.Mappings) {
		return true
	}

	return false
}

// SetMappings gets a reference to the given map[string]interface{} and assigns it to the Mappings field.
func (o *MetaIndexSimple) SetMappings(v map[string]interface{}) {
	o.Mappings = v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *MetaIndexSimple) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MetaIndexSimple) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *MetaIndexSimple) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *MetaIndexSimple) SetName(v string) {
	o.Name = &v
}

// GetSettings returns the Settings field value if set, zero value otherwise.
func (o *MetaIndexSimple) GetSettings() MetaIndexSettings {
	if o == nil || IsNil(o.Settings) {
		var ret MetaIndexSettings
		return ret
	}
	return *o.Settings
}

// GetSettingsOk returns a tuple with the Settings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MetaIndexSimple) GetSettingsOk() (*MetaIndexSettings, bool) {
	if o == nil || IsNil(o.Settings) {
		return nil, false
	}
	return o.Settings, true
}

// HasSettings returns a boolean if a field has been set.
func (o *MetaIndexSimple) HasSettings() bool {
	if o != nil && !IsNil(o.Settings) {
		return true
	}

	return false
}

// SetSettings gets a reference to the given MetaIndexSettings and assigns it to the Settings field.
func (o *MetaIndexSimple) SetSettings(v MetaIndexSettings) {
	o.Settings = &v
}

// GetShardNum returns the ShardNum field value if set, zero value otherwise.
func (o *MetaIndexSimple) GetShardNum() int32 {
	if o == nil || IsNil(o.ShardNum) {
		var ret int32
		return ret
	}
	return *o.ShardNum
}

// GetShardNumOk returns a tuple with the ShardNum field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MetaIndexSimple) GetShardNumOk() (*int32, bool) {
	if o == nil || IsNil(o.ShardNum) {
		return nil, false
	}
	return o.ShardNum, true
}

// HasShardNum returns a boolean if a field has been set.
func (o *MetaIndexSimple) HasShardNum() bool {
	if o != nil && !IsNil(o.ShardNum) {
		return true
	}

	return false
}

// SetShardNum gets a reference to the given int32 and assigns it to the ShardNum field.
func (o *MetaIndexSimple) SetShardNum(v int32) {
	o.ShardNum = &v
}

// GetStorageType returns the StorageType field value if set, zero value otherwise.
func (o *MetaIndexSimple) GetStorageType() string {
	if o == nil || IsNil(o.StorageType) {
		var ret string
		return ret
	}
	return *o.StorageType
}

// GetStorageTypeOk returns a tuple with the StorageType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MetaIndexSimple) GetStorageTypeOk() (*string, bool) {
	if o == nil || IsNil(o.StorageType) {
		return nil, false
	}
	return o.StorageType, true
}

// HasStorageType returns a boolean if a field has been set.
func (o *MetaIndexSimple) HasStorageType() bool {
	if o != nil && !IsNil(o.StorageType) {
		return true
	}

	return false
}

// SetStorageType gets a reference to the given string and assigns it to the StorageType field.
func (o *MetaIndexSimple) SetStorageType(v string) {
	o.StorageType = &v
}

func (o MetaIndexSimple) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MetaIndexSimple) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Mappings) {
		toSerialize["mappings"] = o.Mappings
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Settings) {
		toSerialize["settings"] = o.Settings
	}
	if !IsNil(o.ShardNum) {
		toSerialize["shard_num"] = o.ShardNum
	}
	if !IsNil(o.StorageType) {
		toSerialize["storage_type"] = o.StorageType
	}
	return toSerialize, nil
}

type NullableMetaIndexSimple struct {
	value *MetaIndexSimple
	isSet bool
}

func (v NullableMetaIndexSimple) Get() *MetaIndexSimple {
	return v.value
}

func (v *NullableMetaIndexSimple) Set(val *MetaIndexSimple) {
	v.value = val
	v.isSet = true
}

func (v NullableMetaIndexSimple) IsSet() bool {
	return v.isSet
}

func (v *NullableMetaIndexSimple) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMetaIndexSimple(val *MetaIndexSimple) *NullableMetaIndexSimple {
	return &NullableMetaIndexSimple{value: val, isSet: true}
}

func (v NullableMetaIndexSimple) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMetaIndexSimple) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
