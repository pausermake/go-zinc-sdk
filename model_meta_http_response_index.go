/*
Zinc Search engine API

Zinc Search engine API documents https://zincsearch-docs.zinc.dev

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the MetaHTTPResponseIndex type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MetaHTTPResponseIndex{}

// MetaHTTPResponseIndex struct for MetaHTTPResponseIndex
type MetaHTTPResponseIndex struct {
	Index       *string `json:"index,omitempty"`
	Message     *string `json:"message,omitempty"`
	StorageType *string `json:"storage_type,omitempty"`
}

// NewMetaHTTPResponseIndex instantiates a new MetaHTTPResponseIndex object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMetaHTTPResponseIndex() *MetaHTTPResponseIndex {
	this := MetaHTTPResponseIndex{}
	return &this
}

// NewMetaHTTPResponseIndexWithDefaults instantiates a new MetaHTTPResponseIndex object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMetaHTTPResponseIndexWithDefaults() *MetaHTTPResponseIndex {
	this := MetaHTTPResponseIndex{}
	return &this
}

// GetIndex returns the Index field value if set, zero value otherwise.
func (o *MetaHTTPResponseIndex) GetIndex() string {
	if o == nil || IsNil(o.Index) {
		var ret string
		return ret
	}
	return *o.Index
}

// GetIndexOk returns a tuple with the Index field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MetaHTTPResponseIndex) GetIndexOk() (*string, bool) {
	if o == nil || IsNil(o.Index) {
		return nil, false
	}
	return o.Index, true
}

// HasIndex returns a boolean if a field has been set.
func (o *MetaHTTPResponseIndex) HasIndex() bool {
	if o != nil && !IsNil(o.Index) {
		return true
	}

	return false
}

// SetIndex gets a reference to the given string and assigns it to the Index field.
func (o *MetaHTTPResponseIndex) SetIndex(v string) {
	o.Index = &v
}

// GetMessage returns the Message field value if set, zero value otherwise.
func (o *MetaHTTPResponseIndex) GetMessage() string {
	if o == nil || IsNil(o.Message) {
		var ret string
		return ret
	}
	return *o.Message
}

// GetMessageOk returns a tuple with the Message field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MetaHTTPResponseIndex) GetMessageOk() (*string, bool) {
	if o == nil || IsNil(o.Message) {
		return nil, false
	}
	return o.Message, true
}

// HasMessage returns a boolean if a field has been set.
func (o *MetaHTTPResponseIndex) HasMessage() bool {
	if o != nil && !IsNil(o.Message) {
		return true
	}

	return false
}

// SetMessage gets a reference to the given string and assigns it to the Message field.
func (o *MetaHTTPResponseIndex) SetMessage(v string) {
	o.Message = &v
}

// GetStorageType returns the StorageType field value if set, zero value otherwise.
func (o *MetaHTTPResponseIndex) GetStorageType() string {
	if o == nil || IsNil(o.StorageType) {
		var ret string
		return ret
	}
	return *o.StorageType
}

// GetStorageTypeOk returns a tuple with the StorageType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MetaHTTPResponseIndex) GetStorageTypeOk() (*string, bool) {
	if o == nil || IsNil(o.StorageType) {
		return nil, false
	}
	return o.StorageType, true
}

// HasStorageType returns a boolean if a field has been set.
func (o *MetaHTTPResponseIndex) HasStorageType() bool {
	if o != nil && !IsNil(o.StorageType) {
		return true
	}

	return false
}

// SetStorageType gets a reference to the given string and assigns it to the StorageType field.
func (o *MetaHTTPResponseIndex) SetStorageType(v string) {
	o.StorageType = &v
}

func (o MetaHTTPResponseIndex) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MetaHTTPResponseIndex) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Index) {
		toSerialize["index"] = o.Index
	}
	if !IsNil(o.Message) {
		toSerialize["message"] = o.Message
	}
	if !IsNil(o.StorageType) {
		toSerialize["storage_type"] = o.StorageType
	}
	return toSerialize, nil
}

type NullableMetaHTTPResponseIndex struct {
	value *MetaHTTPResponseIndex
	isSet bool
}

func (v NullableMetaHTTPResponseIndex) Get() *MetaHTTPResponseIndex {
	return v.value
}

func (v *NullableMetaHTTPResponseIndex) Set(val *MetaHTTPResponseIndex) {
	v.value = val
	v.isSet = true
}

func (v NullableMetaHTTPResponseIndex) IsSet() bool {
	return v.isSet
}

func (v *NullableMetaHTTPResponseIndex) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMetaHTTPResponseIndex(val *MetaHTTPResponseIndex) *NullableMetaHTTPResponseIndex {
	return &NullableMetaHTTPResponseIndex{value: val, isSet: true}
}

func (v NullableMetaHTTPResponseIndex) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMetaHTTPResponseIndex) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
