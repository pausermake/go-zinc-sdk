/*
Zinc Search engine API

Zinc Search engine API documents https://zincsearch-docs.zinc.dev

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the MetaTemplateTemplate type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MetaTemplateTemplate{}

// MetaTemplateTemplate struct for MetaTemplateTemplate
type MetaTemplateTemplate struct {
	Mappings *MetaMappings      `json:"mappings,omitempty"`
	Settings *MetaIndexSettings `json:"settings,omitempty"`
}

// NewMetaTemplateTemplate instantiates a new MetaTemplateTemplate object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMetaTemplateTemplate() *MetaTemplateTemplate {
	this := MetaTemplateTemplate{}
	return &this
}

// NewMetaTemplateTemplateWithDefaults instantiates a new MetaTemplateTemplate object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMetaTemplateTemplateWithDefaults() *MetaTemplateTemplate {
	this := MetaTemplateTemplate{}
	return &this
}

// GetMappings returns the Mappings field value if set, zero value otherwise.
func (o *MetaTemplateTemplate) GetMappings() MetaMappings {
	if o == nil || IsNil(o.Mappings) {
		var ret MetaMappings
		return ret
	}
	return *o.Mappings
}

// GetMappingsOk returns a tuple with the Mappings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MetaTemplateTemplate) GetMappingsOk() (*MetaMappings, bool) {
	if o == nil || IsNil(o.Mappings) {
		return nil, false
	}
	return o.Mappings, true
}

// HasMappings returns a boolean if a field has been set.
func (o *MetaTemplateTemplate) HasMappings() bool {
	if o != nil && !IsNil(o.Mappings) {
		return true
	}

	return false
}

// SetMappings gets a reference to the given MetaMappings and assigns it to the Mappings field.
func (o *MetaTemplateTemplate) SetMappings(v MetaMappings) {
	o.Mappings = &v
}

// GetSettings returns the Settings field value if set, zero value otherwise.
func (o *MetaTemplateTemplate) GetSettings() MetaIndexSettings {
	if o == nil || IsNil(o.Settings) {
		var ret MetaIndexSettings
		return ret
	}
	return *o.Settings
}

// GetSettingsOk returns a tuple with the Settings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MetaTemplateTemplate) GetSettingsOk() (*MetaIndexSettings, bool) {
	if o == nil || IsNil(o.Settings) {
		return nil, false
	}
	return o.Settings, true
}

// HasSettings returns a boolean if a field has been set.
func (o *MetaTemplateTemplate) HasSettings() bool {
	if o != nil && !IsNil(o.Settings) {
		return true
	}

	return false
}

// SetSettings gets a reference to the given MetaIndexSettings and assigns it to the Settings field.
func (o *MetaTemplateTemplate) SetSettings(v MetaIndexSettings) {
	o.Settings = &v
}

func (o MetaTemplateTemplate) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MetaTemplateTemplate) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Mappings) {
		toSerialize["mappings"] = o.Mappings
	}
	if !IsNil(o.Settings) {
		toSerialize["settings"] = o.Settings
	}
	return toSerialize, nil
}

type NullableMetaTemplateTemplate struct {
	value *MetaTemplateTemplate
	isSet bool
}

func (v NullableMetaTemplateTemplate) Get() *MetaTemplateTemplate {
	return v.value
}

func (v *NullableMetaTemplateTemplate) Set(val *MetaTemplateTemplate) {
	v.value = val
	v.isSet = true
}

func (v NullableMetaTemplateTemplate) IsSet() bool {
	return v.isSet
}

func (v *NullableMetaTemplateTemplate) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMetaTemplateTemplate(val *MetaTemplateTemplate) *NullableMetaTemplateTemplate {
	return &NullableMetaTemplateTemplate{value: val, isSet: true}
}

func (v NullableMetaTemplateTemplate) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMetaTemplateTemplate) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
