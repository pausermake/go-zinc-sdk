/*
Zinc Search engine API

Zinc Search engine API documents https://zincsearch-docs.zinc.dev

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the MetaFuzzyQuery type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MetaFuzzyQuery{}

// MetaFuzzyQuery struct for MetaFuzzyQuery
type MetaFuzzyQuery struct {
	Boost *float32 `json:"boost,omitempty"`
	// auto, 1,2,3,n
	Fuzziness    map[string]interface{} `json:"fuzziness,omitempty"`
	PrefixLength *float32               `json:"prefix_length,omitempty"`
	Value        *string                `json:"value,omitempty"`
}

// NewMetaFuzzyQuery instantiates a new MetaFuzzyQuery object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMetaFuzzyQuery() *MetaFuzzyQuery {
	this := MetaFuzzyQuery{}
	return &this
}

// NewMetaFuzzyQueryWithDefaults instantiates a new MetaFuzzyQuery object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMetaFuzzyQueryWithDefaults() *MetaFuzzyQuery {
	this := MetaFuzzyQuery{}
	return &this
}

// GetBoost returns the Boost field value if set, zero value otherwise.
func (o *MetaFuzzyQuery) GetBoost() float32 {
	if o == nil || IsNil(o.Boost) {
		var ret float32
		return ret
	}
	return *o.Boost
}

// GetBoostOk returns a tuple with the Boost field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MetaFuzzyQuery) GetBoostOk() (*float32, bool) {
	if o == nil || IsNil(o.Boost) {
		return nil, false
	}
	return o.Boost, true
}

// HasBoost returns a boolean if a field has been set.
func (o *MetaFuzzyQuery) HasBoost() bool {
	if o != nil && !IsNil(o.Boost) {
		return true
	}

	return false
}

// SetBoost gets a reference to the given float32 and assigns it to the Boost field.
func (o *MetaFuzzyQuery) SetBoost(v float32) {
	o.Boost = &v
}

// GetFuzziness returns the Fuzziness field value if set, zero value otherwise.
func (o *MetaFuzzyQuery) GetFuzziness() map[string]interface{} {
	if o == nil || IsNil(o.Fuzziness) {
		var ret map[string]interface{}
		return ret
	}
	return o.Fuzziness
}

// GetFuzzinessOk returns a tuple with the Fuzziness field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MetaFuzzyQuery) GetFuzzinessOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Fuzziness) {
		return map[string]interface{}{}, false
	}
	return o.Fuzziness, true
}

// HasFuzziness returns a boolean if a field has been set.
func (o *MetaFuzzyQuery) HasFuzziness() bool {
	if o != nil && !IsNil(o.Fuzziness) {
		return true
	}

	return false
}

// SetFuzziness gets a reference to the given map[string]interface{} and assigns it to the Fuzziness field.
func (o *MetaFuzzyQuery) SetFuzziness(v map[string]interface{}) {
	o.Fuzziness = v
}

// GetPrefixLength returns the PrefixLength field value if set, zero value otherwise.
func (o *MetaFuzzyQuery) GetPrefixLength() float32 {
	if o == nil || IsNil(o.PrefixLength) {
		var ret float32
		return ret
	}
	return *o.PrefixLength
}

// GetPrefixLengthOk returns a tuple with the PrefixLength field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MetaFuzzyQuery) GetPrefixLengthOk() (*float32, bool) {
	if o == nil || IsNil(o.PrefixLength) {
		return nil, false
	}
	return o.PrefixLength, true
}

// HasPrefixLength returns a boolean if a field has been set.
func (o *MetaFuzzyQuery) HasPrefixLength() bool {
	if o != nil && !IsNil(o.PrefixLength) {
		return true
	}

	return false
}

// SetPrefixLength gets a reference to the given float32 and assigns it to the PrefixLength field.
func (o *MetaFuzzyQuery) SetPrefixLength(v float32) {
	o.PrefixLength = &v
}

// GetValue returns the Value field value if set, zero value otherwise.
func (o *MetaFuzzyQuery) GetValue() string {
	if o == nil || IsNil(o.Value) {
		var ret string
		return ret
	}
	return *o.Value
}

// GetValueOk returns a tuple with the Value field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MetaFuzzyQuery) GetValueOk() (*string, bool) {
	if o == nil || IsNil(o.Value) {
		return nil, false
	}
	return o.Value, true
}

// HasValue returns a boolean if a field has been set.
func (o *MetaFuzzyQuery) HasValue() bool {
	if o != nil && !IsNil(o.Value) {
		return true
	}

	return false
}

// SetValue gets a reference to the given string and assigns it to the Value field.
func (o *MetaFuzzyQuery) SetValue(v string) {
	o.Value = &v
}

func (o MetaFuzzyQuery) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MetaFuzzyQuery) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Boost) {
		toSerialize["boost"] = o.Boost
	}
	if !IsNil(o.Fuzziness) {
		toSerialize["fuzziness"] = o.Fuzziness
	}
	if !IsNil(o.PrefixLength) {
		toSerialize["prefix_length"] = o.PrefixLength
	}
	if !IsNil(o.Value) {
		toSerialize["value"] = o.Value
	}
	return toSerialize, nil
}

type NullableMetaFuzzyQuery struct {
	value *MetaFuzzyQuery
	isSet bool
}

func (v NullableMetaFuzzyQuery) Get() *MetaFuzzyQuery {
	return v.value
}

func (v *NullableMetaFuzzyQuery) Set(val *MetaFuzzyQuery) {
	v.value = val
	v.isSet = true
}

func (v NullableMetaFuzzyQuery) IsSet() bool {
	return v.isSet
}

func (v *NullableMetaFuzzyQuery) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMetaFuzzyQuery(val *MetaFuzzyQuery) *NullableMetaFuzzyQuery {
	return &NullableMetaFuzzyQuery{value: val, isSet: true}
}

func (v NullableMetaFuzzyQuery) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMetaFuzzyQuery) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
