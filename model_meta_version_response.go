/*
Zinc Search engine API

Zinc Search engine API documents https://zincsearch-docs.zinc.dev

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the MetaVersionResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MetaVersionResponse{}

// MetaVersionResponse struct for MetaVersionResponse
type MetaVersionResponse struct {
	Branch     *string `json:"branch,omitempty"`
	Build      *string `json:"build,omitempty"`
	BuildDate  *string `json:"build_date,omitempty"`
	CommitHash *string `json:"commit_hash,omitempty"`
	Version    *string `json:"version,omitempty"`
}

// NewMetaVersionResponse instantiates a new MetaVersionResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMetaVersionResponse() *MetaVersionResponse {
	this := MetaVersionResponse{}
	return &this
}

// NewMetaVersionResponseWithDefaults instantiates a new MetaVersionResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMetaVersionResponseWithDefaults() *MetaVersionResponse {
	this := MetaVersionResponse{}
	return &this
}

// GetBranch returns the Branch field value if set, zero value otherwise.
func (o *MetaVersionResponse) GetBranch() string {
	if o == nil || IsNil(o.Branch) {
		var ret string
		return ret
	}
	return *o.Branch
}

// GetBranchOk returns a tuple with the Branch field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MetaVersionResponse) GetBranchOk() (*string, bool) {
	if o == nil || IsNil(o.Branch) {
		return nil, false
	}
	return o.Branch, true
}

// HasBranch returns a boolean if a field has been set.
func (o *MetaVersionResponse) HasBranch() bool {
	if o != nil && !IsNil(o.Branch) {
		return true
	}

	return false
}

// SetBranch gets a reference to the given string and assigns it to the Branch field.
func (o *MetaVersionResponse) SetBranch(v string) {
	o.Branch = &v
}

// GetBuild returns the Build field value if set, zero value otherwise.
func (o *MetaVersionResponse) GetBuild() string {
	if o == nil || IsNil(o.Build) {
		var ret string
		return ret
	}
	return *o.Build
}

// GetBuildOk returns a tuple with the Build field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MetaVersionResponse) GetBuildOk() (*string, bool) {
	if o == nil || IsNil(o.Build) {
		return nil, false
	}
	return o.Build, true
}

// HasBuild returns a boolean if a field has been set.
func (o *MetaVersionResponse) HasBuild() bool {
	if o != nil && !IsNil(o.Build) {
		return true
	}

	return false
}

// SetBuild gets a reference to the given string and assigns it to the Build field.
func (o *MetaVersionResponse) SetBuild(v string) {
	o.Build = &v
}

// GetBuildDate returns the BuildDate field value if set, zero value otherwise.
func (o *MetaVersionResponse) GetBuildDate() string {
	if o == nil || IsNil(o.BuildDate) {
		var ret string
		return ret
	}
	return *o.BuildDate
}

// GetBuildDateOk returns a tuple with the BuildDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MetaVersionResponse) GetBuildDateOk() (*string, bool) {
	if o == nil || IsNil(o.BuildDate) {
		return nil, false
	}
	return o.BuildDate, true
}

// HasBuildDate returns a boolean if a field has been set.
func (o *MetaVersionResponse) HasBuildDate() bool {
	if o != nil && !IsNil(o.BuildDate) {
		return true
	}

	return false
}

// SetBuildDate gets a reference to the given string and assigns it to the BuildDate field.
func (o *MetaVersionResponse) SetBuildDate(v string) {
	o.BuildDate = &v
}

// GetCommitHash returns the CommitHash field value if set, zero value otherwise.
func (o *MetaVersionResponse) GetCommitHash() string {
	if o == nil || IsNil(o.CommitHash) {
		var ret string
		return ret
	}
	return *o.CommitHash
}

// GetCommitHashOk returns a tuple with the CommitHash field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MetaVersionResponse) GetCommitHashOk() (*string, bool) {
	if o == nil || IsNil(o.CommitHash) {
		return nil, false
	}
	return o.CommitHash, true
}

// HasCommitHash returns a boolean if a field has been set.
func (o *MetaVersionResponse) HasCommitHash() bool {
	if o != nil && !IsNil(o.CommitHash) {
		return true
	}

	return false
}

// SetCommitHash gets a reference to the given string and assigns it to the CommitHash field.
func (o *MetaVersionResponse) SetCommitHash(v string) {
	o.CommitHash = &v
}

// GetVersion returns the Version field value if set, zero value otherwise.
func (o *MetaVersionResponse) GetVersion() string {
	if o == nil || IsNil(o.Version) {
		var ret string
		return ret
	}
	return *o.Version
}

// GetVersionOk returns a tuple with the Version field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MetaVersionResponse) GetVersionOk() (*string, bool) {
	if o == nil || IsNil(o.Version) {
		return nil, false
	}
	return o.Version, true
}

// HasVersion returns a boolean if a field has been set.
func (o *MetaVersionResponse) HasVersion() bool {
	if o != nil && !IsNil(o.Version) {
		return true
	}

	return false
}

// SetVersion gets a reference to the given string and assigns it to the Version field.
func (o *MetaVersionResponse) SetVersion(v string) {
	o.Version = &v
}

func (o MetaVersionResponse) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MetaVersionResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Branch) {
		toSerialize["branch"] = o.Branch
	}
	if !IsNil(o.Build) {
		toSerialize["build"] = o.Build
	}
	if !IsNil(o.BuildDate) {
		toSerialize["build_date"] = o.BuildDate
	}
	if !IsNil(o.CommitHash) {
		toSerialize["commit_hash"] = o.CommitHash
	}
	if !IsNil(o.Version) {
		toSerialize["version"] = o.Version
	}
	return toSerialize, nil
}

type NullableMetaVersionResponse struct {
	value *MetaVersionResponse
	isSet bool
}

func (v NullableMetaVersionResponse) Get() *MetaVersionResponse {
	return v.value
}

func (v *NullableMetaVersionResponse) Set(val *MetaVersionResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableMetaVersionResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableMetaVersionResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMetaVersionResponse(val *MetaVersionResponse) *NullableMetaVersionResponse {
	return &NullableMetaVersionResponse{value: val, isSet: true}
}

func (v NullableMetaVersionResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMetaVersionResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
