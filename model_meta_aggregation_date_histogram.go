/*
Zinc Search engine API

Zinc Search engine API documents https://zincsearch-docs.zinc.dev

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the MetaAggregationDateHistogram type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MetaAggregationDateHistogram{}

// MetaAggregationDateHistogram struct for MetaAggregationDateHistogram
type MetaAggregationDateHistogram struct {
	// minute,hour,day,week,month,quarter,year
	CalendarInterval *string                    `json:"calendar_interval,omitempty"`
	ExtendedBounds   *AggregationHistogramBound `json:"extended_bounds,omitempty"`
	Field            *string                    `json:"field,omitempty"`
	// ms,s,m,h,d
	FixedInterval *string `json:"fixed_interval,omitempty"`
	// format key_as_string
	Format     *string                    `json:"format,omitempty"`
	HardBounds *AggregationHistogramBound `json:"hard_bounds,omitempty"`
	// ms,s,m,h,d
	Interval    *string `json:"interval,omitempty"`
	Keyed       *bool   `json:"keyed,omitempty"`
	MinDocCount *int32  `json:"min_doc_count,omitempty"`
	Size        *int32  `json:"size,omitempty"`
	// time_zone
	TimeZone *string `json:"time_zone,omitempty"`
}

// NewMetaAggregationDateHistogram instantiates a new MetaAggregationDateHistogram object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMetaAggregationDateHistogram() *MetaAggregationDateHistogram {
	this := MetaAggregationDateHistogram{}
	return &this
}

// NewMetaAggregationDateHistogramWithDefaults instantiates a new MetaAggregationDateHistogram object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMetaAggregationDateHistogramWithDefaults() *MetaAggregationDateHistogram {
	this := MetaAggregationDateHistogram{}
	return &this
}

// GetCalendarInterval returns the CalendarInterval field value if set, zero value otherwise.
func (o *MetaAggregationDateHistogram) GetCalendarInterval() string {
	if o == nil || IsNil(o.CalendarInterval) {
		var ret string
		return ret
	}
	return *o.CalendarInterval
}

// GetCalendarIntervalOk returns a tuple with the CalendarInterval field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MetaAggregationDateHistogram) GetCalendarIntervalOk() (*string, bool) {
	if o == nil || IsNil(o.CalendarInterval) {
		return nil, false
	}
	return o.CalendarInterval, true
}

// HasCalendarInterval returns a boolean if a field has been set.
func (o *MetaAggregationDateHistogram) HasCalendarInterval() bool {
	if o != nil && !IsNil(o.CalendarInterval) {
		return true
	}

	return false
}

// SetCalendarInterval gets a reference to the given string and assigns it to the CalendarInterval field.
func (o *MetaAggregationDateHistogram) SetCalendarInterval(v string) {
	o.CalendarInterval = &v
}

// GetExtendedBounds returns the ExtendedBounds field value if set, zero value otherwise.
func (o *MetaAggregationDateHistogram) GetExtendedBounds() AggregationHistogramBound {
	if o == nil || IsNil(o.ExtendedBounds) {
		var ret AggregationHistogramBound
		return ret
	}
	return *o.ExtendedBounds
}

// GetExtendedBoundsOk returns a tuple with the ExtendedBounds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MetaAggregationDateHistogram) GetExtendedBoundsOk() (*AggregationHistogramBound, bool) {
	if o == nil || IsNil(o.ExtendedBounds) {
		return nil, false
	}
	return o.ExtendedBounds, true
}

// HasExtendedBounds returns a boolean if a field has been set.
func (o *MetaAggregationDateHistogram) HasExtendedBounds() bool {
	if o != nil && !IsNil(o.ExtendedBounds) {
		return true
	}

	return false
}

// SetExtendedBounds gets a reference to the given AggregationHistogramBound and assigns it to the ExtendedBounds field.
func (o *MetaAggregationDateHistogram) SetExtendedBounds(v AggregationHistogramBound) {
	o.ExtendedBounds = &v
}

// GetField returns the Field field value if set, zero value otherwise.
func (o *MetaAggregationDateHistogram) GetField() string {
	if o == nil || IsNil(o.Field) {
		var ret string
		return ret
	}
	return *o.Field
}

// GetFieldOk returns a tuple with the Field field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MetaAggregationDateHistogram) GetFieldOk() (*string, bool) {
	if o == nil || IsNil(o.Field) {
		return nil, false
	}
	return o.Field, true
}

// HasField returns a boolean if a field has been set.
func (o *MetaAggregationDateHistogram) HasField() bool {
	if o != nil && !IsNil(o.Field) {
		return true
	}

	return false
}

// SetField gets a reference to the given string and assigns it to the Field field.
func (o *MetaAggregationDateHistogram) SetField(v string) {
	o.Field = &v
}

// GetFixedInterval returns the FixedInterval field value if set, zero value otherwise.
func (o *MetaAggregationDateHistogram) GetFixedInterval() string {
	if o == nil || IsNil(o.FixedInterval) {
		var ret string
		return ret
	}
	return *o.FixedInterval
}

// GetFixedIntervalOk returns a tuple with the FixedInterval field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MetaAggregationDateHistogram) GetFixedIntervalOk() (*string, bool) {
	if o == nil || IsNil(o.FixedInterval) {
		return nil, false
	}
	return o.FixedInterval, true
}

// HasFixedInterval returns a boolean if a field has been set.
func (o *MetaAggregationDateHistogram) HasFixedInterval() bool {
	if o != nil && !IsNil(o.FixedInterval) {
		return true
	}

	return false
}

// SetFixedInterval gets a reference to the given string and assigns it to the FixedInterval field.
func (o *MetaAggregationDateHistogram) SetFixedInterval(v string) {
	o.FixedInterval = &v
}

// GetFormat returns the Format field value if set, zero value otherwise.
func (o *MetaAggregationDateHistogram) GetFormat() string {
	if o == nil || IsNil(o.Format) {
		var ret string
		return ret
	}
	return *o.Format
}

// GetFormatOk returns a tuple with the Format field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MetaAggregationDateHistogram) GetFormatOk() (*string, bool) {
	if o == nil || IsNil(o.Format) {
		return nil, false
	}
	return o.Format, true
}

// HasFormat returns a boolean if a field has been set.
func (o *MetaAggregationDateHistogram) HasFormat() bool {
	if o != nil && !IsNil(o.Format) {
		return true
	}

	return false
}

// SetFormat gets a reference to the given string and assigns it to the Format field.
func (o *MetaAggregationDateHistogram) SetFormat(v string) {
	o.Format = &v
}

// GetHardBounds returns the HardBounds field value if set, zero value otherwise.
func (o *MetaAggregationDateHistogram) GetHardBounds() AggregationHistogramBound {
	if o == nil || IsNil(o.HardBounds) {
		var ret AggregationHistogramBound
		return ret
	}
	return *o.HardBounds
}

// GetHardBoundsOk returns a tuple with the HardBounds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MetaAggregationDateHistogram) GetHardBoundsOk() (*AggregationHistogramBound, bool) {
	if o == nil || IsNil(o.HardBounds) {
		return nil, false
	}
	return o.HardBounds, true
}

// HasHardBounds returns a boolean if a field has been set.
func (o *MetaAggregationDateHistogram) HasHardBounds() bool {
	if o != nil && !IsNil(o.HardBounds) {
		return true
	}

	return false
}

// SetHardBounds gets a reference to the given AggregationHistogramBound and assigns it to the HardBounds field.
func (o *MetaAggregationDateHistogram) SetHardBounds(v AggregationHistogramBound) {
	o.HardBounds = &v
}

// GetInterval returns the Interval field value if set, zero value otherwise.
func (o *MetaAggregationDateHistogram) GetInterval() string {
	if o == nil || IsNil(o.Interval) {
		var ret string
		return ret
	}
	return *o.Interval
}

// GetIntervalOk returns a tuple with the Interval field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MetaAggregationDateHistogram) GetIntervalOk() (*string, bool) {
	if o == nil || IsNil(o.Interval) {
		return nil, false
	}
	return o.Interval, true
}

// HasInterval returns a boolean if a field has been set.
func (o *MetaAggregationDateHistogram) HasInterval() bool {
	if o != nil && !IsNil(o.Interval) {
		return true
	}

	return false
}

// SetInterval gets a reference to the given string and assigns it to the Interval field.
func (o *MetaAggregationDateHistogram) SetInterval(v string) {
	o.Interval = &v
}

// GetKeyed returns the Keyed field value if set, zero value otherwise.
func (o *MetaAggregationDateHistogram) GetKeyed() bool {
	if o == nil || IsNil(o.Keyed) {
		var ret bool
		return ret
	}
	return *o.Keyed
}

// GetKeyedOk returns a tuple with the Keyed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MetaAggregationDateHistogram) GetKeyedOk() (*bool, bool) {
	if o == nil || IsNil(o.Keyed) {
		return nil, false
	}
	return o.Keyed, true
}

// HasKeyed returns a boolean if a field has been set.
func (o *MetaAggregationDateHistogram) HasKeyed() bool {
	if o != nil && !IsNil(o.Keyed) {
		return true
	}

	return false
}

// SetKeyed gets a reference to the given bool and assigns it to the Keyed field.
func (o *MetaAggregationDateHistogram) SetKeyed(v bool) {
	o.Keyed = &v
}

// GetMinDocCount returns the MinDocCount field value if set, zero value otherwise.
func (o *MetaAggregationDateHistogram) GetMinDocCount() int32 {
	if o == nil || IsNil(o.MinDocCount) {
		var ret int32
		return ret
	}
	return *o.MinDocCount
}

// GetMinDocCountOk returns a tuple with the MinDocCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MetaAggregationDateHistogram) GetMinDocCountOk() (*int32, bool) {
	if o == nil || IsNil(o.MinDocCount) {
		return nil, false
	}
	return o.MinDocCount, true
}

// HasMinDocCount returns a boolean if a field has been set.
func (o *MetaAggregationDateHistogram) HasMinDocCount() bool {
	if o != nil && !IsNil(o.MinDocCount) {
		return true
	}

	return false
}

// SetMinDocCount gets a reference to the given int32 and assigns it to the MinDocCount field.
func (o *MetaAggregationDateHistogram) SetMinDocCount(v int32) {
	o.MinDocCount = &v
}

// GetSize returns the Size field value if set, zero value otherwise.
func (o *MetaAggregationDateHistogram) GetSize() int32 {
	if o == nil || IsNil(o.Size) {
		var ret int32
		return ret
	}
	return *o.Size
}

// GetSizeOk returns a tuple with the Size field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MetaAggregationDateHistogram) GetSizeOk() (*int32, bool) {
	if o == nil || IsNil(o.Size) {
		return nil, false
	}
	return o.Size, true
}

// HasSize returns a boolean if a field has been set.
func (o *MetaAggregationDateHistogram) HasSize() bool {
	if o != nil && !IsNil(o.Size) {
		return true
	}

	return false
}

// SetSize gets a reference to the given int32 and assigns it to the Size field.
func (o *MetaAggregationDateHistogram) SetSize(v int32) {
	o.Size = &v
}

// GetTimeZone returns the TimeZone field value if set, zero value otherwise.
func (o *MetaAggregationDateHistogram) GetTimeZone() string {
	if o == nil || IsNil(o.TimeZone) {
		var ret string
		return ret
	}
	return *o.TimeZone
}

// GetTimeZoneOk returns a tuple with the TimeZone field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MetaAggregationDateHistogram) GetTimeZoneOk() (*string, bool) {
	if o == nil || IsNil(o.TimeZone) {
		return nil, false
	}
	return o.TimeZone, true
}

// HasTimeZone returns a boolean if a field has been set.
func (o *MetaAggregationDateHistogram) HasTimeZone() bool {
	if o != nil && !IsNil(o.TimeZone) {
		return true
	}

	return false
}

// SetTimeZone gets a reference to the given string and assigns it to the TimeZone field.
func (o *MetaAggregationDateHistogram) SetTimeZone(v string) {
	o.TimeZone = &v
}

func (o MetaAggregationDateHistogram) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MetaAggregationDateHistogram) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.CalendarInterval) {
		toSerialize["calendar_interval"] = o.CalendarInterval
	}
	if !IsNil(o.ExtendedBounds) {
		toSerialize["extended_bounds"] = o.ExtendedBounds
	}
	if !IsNil(o.Field) {
		toSerialize["field"] = o.Field
	}
	if !IsNil(o.FixedInterval) {
		toSerialize["fixed_interval"] = o.FixedInterval
	}
	if !IsNil(o.Format) {
		toSerialize["format"] = o.Format
	}
	if !IsNil(o.HardBounds) {
		toSerialize["hard_bounds"] = o.HardBounds
	}
	if !IsNil(o.Interval) {
		toSerialize["interval"] = o.Interval
	}
	if !IsNil(o.Keyed) {
		toSerialize["keyed"] = o.Keyed
	}
	if !IsNil(o.MinDocCount) {
		toSerialize["min_doc_count"] = o.MinDocCount
	}
	if !IsNil(o.Size) {
		toSerialize["size"] = o.Size
	}
	if !IsNil(o.TimeZone) {
		toSerialize["time_zone"] = o.TimeZone
	}
	return toSerialize, nil
}

type NullableMetaAggregationDateHistogram struct {
	value *MetaAggregationDateHistogram
	isSet bool
}

func (v NullableMetaAggregationDateHistogram) Get() *MetaAggregationDateHistogram {
	return v.value
}

func (v *NullableMetaAggregationDateHistogram) Set(val *MetaAggregationDateHistogram) {
	v.value = val
	v.isSet = true
}

func (v NullableMetaAggregationDateHistogram) IsSet() bool {
	return v.isSet
}

func (v *NullableMetaAggregationDateHistogram) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMetaAggregationDateHistogram(val *MetaAggregationDateHistogram) *NullableMetaAggregationDateHistogram {
	return &NullableMetaAggregationDateHistogram{value: val, isSet: true}
}

func (v NullableMetaAggregationDateHistogram) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMetaAggregationDateHistogram) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
