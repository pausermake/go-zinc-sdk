/*
Zinc Search engine API

Zinc Search engine API documents https://zincsearch-docs.zinc.dev

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the MetaQueryForSDK type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MetaQueryForSDK{}

// MetaQueryForSDK struct for MetaQueryForSDK
type MetaQueryForSDK struct {
	// .
	Bool *MetaBoolQueryForSDK `json:"bool,omitempty"`
	// .
	Exists *MetaExistsQuery `json:"exists,omitempty"`
	// simple, PrefixQuery
	Fuzzy *map[string]MetaFuzzyQuery `json:"fuzzy,omitempty"`
	// .
	Ids *MetaIdsQuery `json:"ids,omitempty"`
	// simple, MatchQuery
	Match *map[string]MetaMatchQuery `json:"match,omitempty"`
	// just set or null
	MatchAll map[string]interface{} `json:"match_all,omitempty"`
	// simple, MatchBoolPrefixQuery
	MatchBoolPrefix *map[string]MetaMatchBoolPrefixQuery `json:"match_bool_prefix,omitempty"`
	// just set or null
	MatchNone map[string]interface{} `json:"match_none,omitempty"`
	// simple, MatchPhraseQuery
	MatchPhrase *map[string]MetaMatchPhraseQuery `json:"match_phrase,omitempty"`
	// simple, MatchPhrasePrefixQuery
	MatchPhrasePrefix *map[string]MetaMatchPhrasePrefixQuery `json:"match_phrase_prefix,omitempty"`
	// .
	MultiMatch *MetaMultiMatchQuery `json:"multi_match,omitempty"`
	// .
	Prefix *map[string]MetaPrefixQuery `json:"prefix,omitempty"`
	// .
	QueryString *MetaQueryStringQuery `json:"query_string,omitempty"`
	// simple, FuzzyQuery
	Range *map[string]MetaRangeQueryForSDK `json:"range,omitempty"`
	// simple, FuzzyQuery
	Regexp *map[string]MetaRegexpQuery `json:"regexp,omitempty"`
	// .
	SimpleQueryString *MetaSimpleQueryStringQuery `json:"simple_query_string,omitempty"`
	// simple, TermQuery
	Term *map[string]MetaTermQueryForSDK `json:"term,omitempty"`
	// .
	Terms *map[string]map[string]interface{} `json:"terms,omitempty"`
	// simple, WildcardQuery
	Wildcard *map[string]MetaWildcardQuery `json:"wildcard,omitempty"`
}

// NewMetaQueryForSDK instantiates a new MetaQueryForSDK object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMetaQueryForSDK() *MetaQueryForSDK {
	this := MetaQueryForSDK{}
	return &this
}

// NewMetaQueryForSDKWithDefaults instantiates a new MetaQueryForSDK object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMetaQueryForSDKWithDefaults() *MetaQueryForSDK {
	this := MetaQueryForSDK{}
	return &this
}

// GetBool returns the Bool field value if set, zero value otherwise.
func (o *MetaQueryForSDK) GetBool() MetaBoolQueryForSDK {
	if o == nil || IsNil(o.Bool) {
		var ret MetaBoolQueryForSDK
		return ret
	}
	return *o.Bool
}

// GetBoolOk returns a tuple with the Bool field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MetaQueryForSDK) GetBoolOk() (*MetaBoolQueryForSDK, bool) {
	if o == nil || IsNil(o.Bool) {
		return nil, false
	}
	return o.Bool, true
}

// HasBool returns a boolean if a field has been set.
func (o *MetaQueryForSDK) HasBool() bool {
	if o != nil && !IsNil(o.Bool) {
		return true
	}

	return false
}

// SetBool gets a reference to the given MetaBoolQueryForSDK and assigns it to the Bool field.
func (o *MetaQueryForSDK) SetBool(v MetaBoolQueryForSDK) {
	o.Bool = &v
}

// GetExists returns the Exists field value if set, zero value otherwise.
func (o *MetaQueryForSDK) GetExists() MetaExistsQuery {
	if o == nil || IsNil(o.Exists) {
		var ret MetaExistsQuery
		return ret
	}
	return *o.Exists
}

// GetExistsOk returns a tuple with the Exists field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MetaQueryForSDK) GetExistsOk() (*MetaExistsQuery, bool) {
	if o == nil || IsNil(o.Exists) {
		return nil, false
	}
	return o.Exists, true
}

// HasExists returns a boolean if a field has been set.
func (o *MetaQueryForSDK) HasExists() bool {
	if o != nil && !IsNil(o.Exists) {
		return true
	}

	return false
}

// SetExists gets a reference to the given MetaExistsQuery and assigns it to the Exists field.
func (o *MetaQueryForSDK) SetExists(v MetaExistsQuery) {
	o.Exists = &v
}

// GetFuzzy returns the Fuzzy field value if set, zero value otherwise.
func (o *MetaQueryForSDK) GetFuzzy() map[string]MetaFuzzyQuery {
	if o == nil || IsNil(o.Fuzzy) {
		var ret map[string]MetaFuzzyQuery
		return ret
	}
	return *o.Fuzzy
}

// GetFuzzyOk returns a tuple with the Fuzzy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MetaQueryForSDK) GetFuzzyOk() (*map[string]MetaFuzzyQuery, bool) {
	if o == nil || IsNil(o.Fuzzy) {
		return nil, false
	}
	return o.Fuzzy, true
}

// HasFuzzy returns a boolean if a field has been set.
func (o *MetaQueryForSDK) HasFuzzy() bool {
	if o != nil && !IsNil(o.Fuzzy) {
		return true
	}

	return false
}

// SetFuzzy gets a reference to the given map[string]MetaFuzzyQuery and assigns it to the Fuzzy field.
func (o *MetaQueryForSDK) SetFuzzy(v map[string]MetaFuzzyQuery) {
	o.Fuzzy = &v
}

// GetIds returns the Ids field value if set, zero value otherwise.
func (o *MetaQueryForSDK) GetIds() MetaIdsQuery {
	if o == nil || IsNil(o.Ids) {
		var ret MetaIdsQuery
		return ret
	}
	return *o.Ids
}

// GetIdsOk returns a tuple with the Ids field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MetaQueryForSDK) GetIdsOk() (*MetaIdsQuery, bool) {
	if o == nil || IsNil(o.Ids) {
		return nil, false
	}
	return o.Ids, true
}

// HasIds returns a boolean if a field has been set.
func (o *MetaQueryForSDK) HasIds() bool {
	if o != nil && !IsNil(o.Ids) {
		return true
	}

	return false
}

// SetIds gets a reference to the given MetaIdsQuery and assigns it to the Ids field.
func (o *MetaQueryForSDK) SetIds(v MetaIdsQuery) {
	o.Ids = &v
}

// GetMatch returns the Match field value if set, zero value otherwise.
func (o *MetaQueryForSDK) GetMatch() map[string]MetaMatchQuery {
	if o == nil || IsNil(o.Match) {
		var ret map[string]MetaMatchQuery
		return ret
	}
	return *o.Match
}

// GetMatchOk returns a tuple with the Match field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MetaQueryForSDK) GetMatchOk() (*map[string]MetaMatchQuery, bool) {
	if o == nil || IsNil(o.Match) {
		return nil, false
	}
	return o.Match, true
}

// HasMatch returns a boolean if a field has been set.
func (o *MetaQueryForSDK) HasMatch() bool {
	if o != nil && !IsNil(o.Match) {
		return true
	}

	return false
}

// SetMatch gets a reference to the given map[string]MetaMatchQuery and assigns it to the Match field.
func (o *MetaQueryForSDK) SetMatch(v map[string]MetaMatchQuery) {
	o.Match = &v
}

// GetMatchAll returns the MatchAll field value if set, zero value otherwise.
func (o *MetaQueryForSDK) GetMatchAll() map[string]interface{} {
	if o == nil || IsNil(o.MatchAll) {
		var ret map[string]interface{}
		return ret
	}
	return o.MatchAll
}

// GetMatchAllOk returns a tuple with the MatchAll field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MetaQueryForSDK) GetMatchAllOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.MatchAll) {
		return map[string]interface{}{}, false
	}
	return o.MatchAll, true
}

// HasMatchAll returns a boolean if a field has been set.
func (o *MetaQueryForSDK) HasMatchAll() bool {
	if o != nil && !IsNil(o.MatchAll) {
		return true
	}

	return false
}

// SetMatchAll gets a reference to the given map[string]interface{} and assigns it to the MatchAll field.
func (o *MetaQueryForSDK) SetMatchAll(v map[string]interface{}) {
	o.MatchAll = v
}

// GetMatchBoolPrefix returns the MatchBoolPrefix field value if set, zero value otherwise.
func (o *MetaQueryForSDK) GetMatchBoolPrefix() map[string]MetaMatchBoolPrefixQuery {
	if o == nil || IsNil(o.MatchBoolPrefix) {
		var ret map[string]MetaMatchBoolPrefixQuery
		return ret
	}
	return *o.MatchBoolPrefix
}

// GetMatchBoolPrefixOk returns a tuple with the MatchBoolPrefix field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MetaQueryForSDK) GetMatchBoolPrefixOk() (*map[string]MetaMatchBoolPrefixQuery, bool) {
	if o == nil || IsNil(o.MatchBoolPrefix) {
		return nil, false
	}
	return o.MatchBoolPrefix, true
}

// HasMatchBoolPrefix returns a boolean if a field has been set.
func (o *MetaQueryForSDK) HasMatchBoolPrefix() bool {
	if o != nil && !IsNil(o.MatchBoolPrefix) {
		return true
	}

	return false
}

// SetMatchBoolPrefix gets a reference to the given map[string]MetaMatchBoolPrefixQuery and assigns it to the MatchBoolPrefix field.
func (o *MetaQueryForSDK) SetMatchBoolPrefix(v map[string]MetaMatchBoolPrefixQuery) {
	o.MatchBoolPrefix = &v
}

// GetMatchNone returns the MatchNone field value if set, zero value otherwise.
func (o *MetaQueryForSDK) GetMatchNone() map[string]interface{} {
	if o == nil || IsNil(o.MatchNone) {
		var ret map[string]interface{}
		return ret
	}
	return o.MatchNone
}

// GetMatchNoneOk returns a tuple with the MatchNone field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MetaQueryForSDK) GetMatchNoneOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.MatchNone) {
		return map[string]interface{}{}, false
	}
	return o.MatchNone, true
}

// HasMatchNone returns a boolean if a field has been set.
func (o *MetaQueryForSDK) HasMatchNone() bool {
	if o != nil && !IsNil(o.MatchNone) {
		return true
	}

	return false
}

// SetMatchNone gets a reference to the given map[string]interface{} and assigns it to the MatchNone field.
func (o *MetaQueryForSDK) SetMatchNone(v map[string]interface{}) {
	o.MatchNone = v
}

// GetMatchPhrase returns the MatchPhrase field value if set, zero value otherwise.
func (o *MetaQueryForSDK) GetMatchPhrase() map[string]MetaMatchPhraseQuery {
	if o == nil || IsNil(o.MatchPhrase) {
		var ret map[string]MetaMatchPhraseQuery
		return ret
	}
	return *o.MatchPhrase
}

// GetMatchPhraseOk returns a tuple with the MatchPhrase field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MetaQueryForSDK) GetMatchPhraseOk() (*map[string]MetaMatchPhraseQuery, bool) {
	if o == nil || IsNil(o.MatchPhrase) {
		return nil, false
	}
	return o.MatchPhrase, true
}

// HasMatchPhrase returns a boolean if a field has been set.
func (o *MetaQueryForSDK) HasMatchPhrase() bool {
	if o != nil && !IsNil(o.MatchPhrase) {
		return true
	}

	return false
}

// SetMatchPhrase gets a reference to the given map[string]MetaMatchPhraseQuery and assigns it to the MatchPhrase field.
func (o *MetaQueryForSDK) SetMatchPhrase(v map[string]MetaMatchPhraseQuery) {
	o.MatchPhrase = &v
}

// GetMatchPhrasePrefix returns the MatchPhrasePrefix field value if set, zero value otherwise.
func (o *MetaQueryForSDK) GetMatchPhrasePrefix() map[string]MetaMatchPhrasePrefixQuery {
	if o == nil || IsNil(o.MatchPhrasePrefix) {
		var ret map[string]MetaMatchPhrasePrefixQuery
		return ret
	}
	return *o.MatchPhrasePrefix
}

// GetMatchPhrasePrefixOk returns a tuple with the MatchPhrasePrefix field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MetaQueryForSDK) GetMatchPhrasePrefixOk() (*map[string]MetaMatchPhrasePrefixQuery, bool) {
	if o == nil || IsNil(o.MatchPhrasePrefix) {
		return nil, false
	}
	return o.MatchPhrasePrefix, true
}

// HasMatchPhrasePrefix returns a boolean if a field has been set.
func (o *MetaQueryForSDK) HasMatchPhrasePrefix() bool {
	if o != nil && !IsNil(o.MatchPhrasePrefix) {
		return true
	}

	return false
}

// SetMatchPhrasePrefix gets a reference to the given map[string]MetaMatchPhrasePrefixQuery and assigns it to the MatchPhrasePrefix field.
func (o *MetaQueryForSDK) SetMatchPhrasePrefix(v map[string]MetaMatchPhrasePrefixQuery) {
	o.MatchPhrasePrefix = &v
}

// GetMultiMatch returns the MultiMatch field value if set, zero value otherwise.
func (o *MetaQueryForSDK) GetMultiMatch() MetaMultiMatchQuery {
	if o == nil || IsNil(o.MultiMatch) {
		var ret MetaMultiMatchQuery
		return ret
	}
	return *o.MultiMatch
}

// GetMultiMatchOk returns a tuple with the MultiMatch field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MetaQueryForSDK) GetMultiMatchOk() (*MetaMultiMatchQuery, bool) {
	if o == nil || IsNil(o.MultiMatch) {
		return nil, false
	}
	return o.MultiMatch, true
}

// HasMultiMatch returns a boolean if a field has been set.
func (o *MetaQueryForSDK) HasMultiMatch() bool {
	if o != nil && !IsNil(o.MultiMatch) {
		return true
	}

	return false
}

// SetMultiMatch gets a reference to the given MetaMultiMatchQuery and assigns it to the MultiMatch field.
func (o *MetaQueryForSDK) SetMultiMatch(v MetaMultiMatchQuery) {
	o.MultiMatch = &v
}

// GetPrefix returns the Prefix field value if set, zero value otherwise.
func (o *MetaQueryForSDK) GetPrefix() map[string]MetaPrefixQuery {
	if o == nil || IsNil(o.Prefix) {
		var ret map[string]MetaPrefixQuery
		return ret
	}
	return *o.Prefix
}

// GetPrefixOk returns a tuple with the Prefix field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MetaQueryForSDK) GetPrefixOk() (*map[string]MetaPrefixQuery, bool) {
	if o == nil || IsNil(o.Prefix) {
		return nil, false
	}
	return o.Prefix, true
}

// HasPrefix returns a boolean if a field has been set.
func (o *MetaQueryForSDK) HasPrefix() bool {
	if o != nil && !IsNil(o.Prefix) {
		return true
	}

	return false
}

// SetPrefix gets a reference to the given map[string]MetaPrefixQuery and assigns it to the Prefix field.
func (o *MetaQueryForSDK) SetPrefix(v map[string]MetaPrefixQuery) {
	o.Prefix = &v
}

// GetQueryString returns the QueryString field value if set, zero value otherwise.
func (o *MetaQueryForSDK) GetQueryString() MetaQueryStringQuery {
	if o == nil || IsNil(o.QueryString) {
		var ret MetaQueryStringQuery
		return ret
	}
	return *o.QueryString
}

// GetQueryStringOk returns a tuple with the QueryString field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MetaQueryForSDK) GetQueryStringOk() (*MetaQueryStringQuery, bool) {
	if o == nil || IsNil(o.QueryString) {
		return nil, false
	}
	return o.QueryString, true
}

// HasQueryString returns a boolean if a field has been set.
func (o *MetaQueryForSDK) HasQueryString() bool {
	if o != nil && !IsNil(o.QueryString) {
		return true
	}

	return false
}

// SetQueryString gets a reference to the given MetaQueryStringQuery and assigns it to the QueryString field.
func (o *MetaQueryForSDK) SetQueryString(v MetaQueryStringQuery) {
	o.QueryString = &v
}

// GetRange returns the Range field value if set, zero value otherwise.
func (o *MetaQueryForSDK) GetRange() map[string]MetaRangeQueryForSDK {
	if o == nil || IsNil(o.Range) {
		var ret map[string]MetaRangeQueryForSDK
		return ret
	}
	return *o.Range
}

// GetRangeOk returns a tuple with the Range field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MetaQueryForSDK) GetRangeOk() (*map[string]MetaRangeQueryForSDK, bool) {
	if o == nil || IsNil(o.Range) {
		return nil, false
	}
	return o.Range, true
}

// HasRange returns a boolean if a field has been set.
func (o *MetaQueryForSDK) HasRange() bool {
	if o != nil && !IsNil(o.Range) {
		return true
	}

	return false
}

// SetRange gets a reference to the given map[string]MetaRangeQueryForSDK and assigns it to the Range field.
func (o *MetaQueryForSDK) SetRange(v map[string]MetaRangeQueryForSDK) {
	o.Range = &v
}

// GetRegexp returns the Regexp field value if set, zero value otherwise.
func (o *MetaQueryForSDK) GetRegexp() map[string]MetaRegexpQuery {
	if o == nil || IsNil(o.Regexp) {
		var ret map[string]MetaRegexpQuery
		return ret
	}
	return *o.Regexp
}

// GetRegexpOk returns a tuple with the Regexp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MetaQueryForSDK) GetRegexpOk() (*map[string]MetaRegexpQuery, bool) {
	if o == nil || IsNil(o.Regexp) {
		return nil, false
	}
	return o.Regexp, true
}

// HasRegexp returns a boolean if a field has been set.
func (o *MetaQueryForSDK) HasRegexp() bool {
	if o != nil && !IsNil(o.Regexp) {
		return true
	}

	return false
}

// SetRegexp gets a reference to the given map[string]MetaRegexpQuery and assigns it to the Regexp field.
func (o *MetaQueryForSDK) SetRegexp(v map[string]MetaRegexpQuery) {
	o.Regexp = &v
}

// GetSimpleQueryString returns the SimpleQueryString field value if set, zero value otherwise.
func (o *MetaQueryForSDK) GetSimpleQueryString() MetaSimpleQueryStringQuery {
	if o == nil || IsNil(o.SimpleQueryString) {
		var ret MetaSimpleQueryStringQuery
		return ret
	}
	return *o.SimpleQueryString
}

// GetSimpleQueryStringOk returns a tuple with the SimpleQueryString field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MetaQueryForSDK) GetSimpleQueryStringOk() (*MetaSimpleQueryStringQuery, bool) {
	if o == nil || IsNil(o.SimpleQueryString) {
		return nil, false
	}
	return o.SimpleQueryString, true
}

// HasSimpleQueryString returns a boolean if a field has been set.
func (o *MetaQueryForSDK) HasSimpleQueryString() bool {
	if o != nil && !IsNil(o.SimpleQueryString) {
		return true
	}

	return false
}

// SetSimpleQueryString gets a reference to the given MetaSimpleQueryStringQuery and assigns it to the SimpleQueryString field.
func (o *MetaQueryForSDK) SetSimpleQueryString(v MetaSimpleQueryStringQuery) {
	o.SimpleQueryString = &v
}

// GetTerm returns the Term field value if set, zero value otherwise.
func (o *MetaQueryForSDK) GetTerm() map[string]MetaTermQueryForSDK {
	if o == nil || IsNil(o.Term) {
		var ret map[string]MetaTermQueryForSDK
		return ret
	}
	return *o.Term
}

// GetTermOk returns a tuple with the Term field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MetaQueryForSDK) GetTermOk() (*map[string]MetaTermQueryForSDK, bool) {
	if o == nil || IsNil(o.Term) {
		return nil, false
	}
	return o.Term, true
}

// HasTerm returns a boolean if a field has been set.
func (o *MetaQueryForSDK) HasTerm() bool {
	if o != nil && !IsNil(o.Term) {
		return true
	}

	return false
}

// SetTerm gets a reference to the given map[string]MetaTermQueryForSDK and assigns it to the Term field.
func (o *MetaQueryForSDK) SetTerm(v map[string]MetaTermQueryForSDK) {
	o.Term = &v
}

// GetTerms returns the Terms field value if set, zero value otherwise.
func (o *MetaQueryForSDK) GetTerms() map[string]map[string]interface{} {
	if o == nil || IsNil(o.Terms) {
		var ret map[string]map[string]interface{}
		return ret
	}
	return *o.Terms
}

// GetTermsOk returns a tuple with the Terms field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MetaQueryForSDK) GetTermsOk() (*map[string]map[string]interface{}, bool) {
	if o == nil || IsNil(o.Terms) {
		return nil, false
	}
	return o.Terms, true
}

// HasTerms returns a boolean if a field has been set.
func (o *MetaQueryForSDK) HasTerms() bool {
	if o != nil && !IsNil(o.Terms) {
		return true
	}

	return false
}

// SetTerms gets a reference to the given map[string]map[string]interface{} and assigns it to the Terms field.
func (o *MetaQueryForSDK) SetTerms(v map[string]map[string]interface{}) {
	o.Terms = &v
}

// GetWildcard returns the Wildcard field value if set, zero value otherwise.
func (o *MetaQueryForSDK) GetWildcard() map[string]MetaWildcardQuery {
	if o == nil || IsNil(o.Wildcard) {
		var ret map[string]MetaWildcardQuery
		return ret
	}
	return *o.Wildcard
}

// GetWildcardOk returns a tuple with the Wildcard field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MetaQueryForSDK) GetWildcardOk() (*map[string]MetaWildcardQuery, bool) {
	if o == nil || IsNil(o.Wildcard) {
		return nil, false
	}
	return o.Wildcard, true
}

// HasWildcard returns a boolean if a field has been set.
func (o *MetaQueryForSDK) HasWildcard() bool {
	if o != nil && !IsNil(o.Wildcard) {
		return true
	}

	return false
}

// SetWildcard gets a reference to the given map[string]MetaWildcardQuery and assigns it to the Wildcard field.
func (o *MetaQueryForSDK) SetWildcard(v map[string]MetaWildcardQuery) {
	o.Wildcard = &v
}

func (o MetaQueryForSDK) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MetaQueryForSDK) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Bool) {
		toSerialize["bool"] = o.Bool
	}
	if !IsNil(o.Exists) {
		toSerialize["exists"] = o.Exists
	}
	if !IsNil(o.Fuzzy) {
		toSerialize["fuzzy"] = o.Fuzzy
	}
	if !IsNil(o.Ids) {
		toSerialize["ids"] = o.Ids
	}
	if !IsNil(o.Match) {
		toSerialize["match"] = o.Match
	}
	if !IsNil(o.MatchAll) {
		toSerialize["match_all"] = o.MatchAll
	}
	if !IsNil(o.MatchBoolPrefix) {
		toSerialize["match_bool_prefix"] = o.MatchBoolPrefix
	}
	if !IsNil(o.MatchNone) {
		toSerialize["match_none"] = o.MatchNone
	}
	if !IsNil(o.MatchPhrase) {
		toSerialize["match_phrase"] = o.MatchPhrase
	}
	if !IsNil(o.MatchPhrasePrefix) {
		toSerialize["match_phrase_prefix"] = o.MatchPhrasePrefix
	}
	if !IsNil(o.MultiMatch) {
		toSerialize["multi_match"] = o.MultiMatch
	}
	if !IsNil(o.Prefix) {
		toSerialize["prefix"] = o.Prefix
	}
	if !IsNil(o.QueryString) {
		toSerialize["query_string"] = o.QueryString
	}
	if !IsNil(o.Range) {
		toSerialize["range"] = o.Range
	}
	if !IsNil(o.Regexp) {
		toSerialize["regexp"] = o.Regexp
	}
	if !IsNil(o.SimpleQueryString) {
		toSerialize["simple_query_string"] = o.SimpleQueryString
	}
	if !IsNil(o.Term) {
		toSerialize["term"] = o.Term
	}
	if !IsNil(o.Terms) {
		toSerialize["terms"] = o.Terms
	}
	if !IsNil(o.Wildcard) {
		toSerialize["wildcard"] = o.Wildcard
	}
	return toSerialize, nil
}

type NullableMetaQueryForSDK struct {
	value *MetaQueryForSDK
	isSet bool
}

func (v NullableMetaQueryForSDK) Get() *MetaQueryForSDK {
	return v.value
}

func (v *NullableMetaQueryForSDK) Set(val *MetaQueryForSDK) {
	v.value = val
	v.isSet = true
}

func (v NullableMetaQueryForSDK) IsSet() bool {
	return v.isSet
}

func (v *NullableMetaQueryForSDK) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMetaQueryForSDK(val *MetaQueryForSDK) *NullableMetaQueryForSDK {
	return &NullableMetaQueryForSDK{value: val, isSet: true}
}

func (v NullableMetaQueryForSDK) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMetaQueryForSDK) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
