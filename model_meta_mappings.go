/*
Zinc Search engine API

Zinc Search engine API documents https://zincsearch-docs.zinc.dev

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the MetaMappings type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MetaMappings{}

// MetaMappings struct for MetaMappings
type MetaMappings struct {
	Properties *map[string]MetaProperty `json:"properties,omitempty"`
}

// NewMetaMappings instantiates a new MetaMappings object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMetaMappings() *MetaMappings {
	this := MetaMappings{}
	return &this
}

// NewMetaMappingsWithDefaults instantiates a new MetaMappings object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMetaMappingsWithDefaults() *MetaMappings {
	this := MetaMappings{}
	return &this
}

// GetProperties returns the Properties field value if set, zero value otherwise.
func (o *MetaMappings) GetProperties() map[string]MetaProperty {
	if o == nil || IsNil(o.Properties) {
		var ret map[string]MetaProperty
		return ret
	}
	return *o.Properties
}

// GetPropertiesOk returns a tuple with the Properties field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MetaMappings) GetPropertiesOk() (*map[string]MetaProperty, bool) {
	if o == nil || IsNil(o.Properties) {
		return nil, false
	}
	return o.Properties, true
}

// HasProperties returns a boolean if a field has been set.
func (o *MetaMappings) HasProperties() bool {
	if o != nil && !IsNil(o.Properties) {
		return true
	}

	return false
}

// SetProperties gets a reference to the given map[string]MetaProperty and assigns it to the Properties field.
func (o *MetaMappings) SetProperties(v map[string]MetaProperty) {
	o.Properties = &v
}

func (o MetaMappings) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MetaMappings) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Properties) {
		toSerialize["properties"] = o.Properties
	}
	return toSerialize, nil
}

type NullableMetaMappings struct {
	value *MetaMappings
	isSet bool
}

func (v NullableMetaMappings) Get() *MetaMappings {
	return v.value
}

func (v *NullableMetaMappings) Set(val *MetaMappings) {
	v.value = val
	v.isSet = true
}

func (v NullableMetaMappings) IsSet() bool {
	return v.isSet
}

func (v *NullableMetaMappings) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMetaMappings(val *MetaMappings) *NullableMetaMappings {
	return &NullableMetaMappings{value: val, isSet: true}
}

func (v NullableMetaMappings) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMetaMappings) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
