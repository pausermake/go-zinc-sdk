/*
Zinc Search engine API

Zinc Search engine API documents https://zincsearch-docs.zinc.dev

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the MetaTermQueryForSDK type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MetaTermQueryForSDK{}

// MetaTermQueryForSDK struct for MetaTermQueryForSDK
type MetaTermQueryForSDK struct {
	Boost           *float32 `json:"boost,omitempty"`
	CaseInsensitive *bool    `json:"case_insensitive,omitempty"`
	Value           *string  `json:"value,omitempty"`
}

// NewMetaTermQueryForSDK instantiates a new MetaTermQueryForSDK object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMetaTermQueryForSDK() *MetaTermQueryForSDK {
	this := MetaTermQueryForSDK{}
	return &this
}

// NewMetaTermQueryForSDKWithDefaults instantiates a new MetaTermQueryForSDK object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMetaTermQueryForSDKWithDefaults() *MetaTermQueryForSDK {
	this := MetaTermQueryForSDK{}
	return &this
}

// GetBoost returns the Boost field value if set, zero value otherwise.
func (o *MetaTermQueryForSDK) GetBoost() float32 {
	if o == nil || IsNil(o.Boost) {
		var ret float32
		return ret
	}
	return *o.Boost
}

// GetBoostOk returns a tuple with the Boost field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MetaTermQueryForSDK) GetBoostOk() (*float32, bool) {
	if o == nil || IsNil(o.Boost) {
		return nil, false
	}
	return o.Boost, true
}

// HasBoost returns a boolean if a field has been set.
func (o *MetaTermQueryForSDK) HasBoost() bool {
	if o != nil && !IsNil(o.Boost) {
		return true
	}

	return false
}

// SetBoost gets a reference to the given float32 and assigns it to the Boost field.
func (o *MetaTermQueryForSDK) SetBoost(v float32) {
	o.Boost = &v
}

// GetCaseInsensitive returns the CaseInsensitive field value if set, zero value otherwise.
func (o *MetaTermQueryForSDK) GetCaseInsensitive() bool {
	if o == nil || IsNil(o.CaseInsensitive) {
		var ret bool
		return ret
	}
	return *o.CaseInsensitive
}

// GetCaseInsensitiveOk returns a tuple with the CaseInsensitive field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MetaTermQueryForSDK) GetCaseInsensitiveOk() (*bool, bool) {
	if o == nil || IsNil(o.CaseInsensitive) {
		return nil, false
	}
	return o.CaseInsensitive, true
}

// HasCaseInsensitive returns a boolean if a field has been set.
func (o *MetaTermQueryForSDK) HasCaseInsensitive() bool {
	if o != nil && !IsNil(o.CaseInsensitive) {
		return true
	}

	return false
}

// SetCaseInsensitive gets a reference to the given bool and assigns it to the CaseInsensitive field.
func (o *MetaTermQueryForSDK) SetCaseInsensitive(v bool) {
	o.CaseInsensitive = &v
}

// GetValue returns the Value field value if set, zero value otherwise.
func (o *MetaTermQueryForSDK) GetValue() string {
	if o == nil || IsNil(o.Value) {
		var ret string
		return ret
	}
	return *o.Value
}

// GetValueOk returns a tuple with the Value field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MetaTermQueryForSDK) GetValueOk() (*string, bool) {
	if o == nil || IsNil(o.Value) {
		return nil, false
	}
	return o.Value, true
}

// HasValue returns a boolean if a field has been set.
func (o *MetaTermQueryForSDK) HasValue() bool {
	if o != nil && !IsNil(o.Value) {
		return true
	}

	return false
}

// SetValue gets a reference to the given string and assigns it to the Value field.
func (o *MetaTermQueryForSDK) SetValue(v string) {
	o.Value = &v
}

func (o MetaTermQueryForSDK) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MetaTermQueryForSDK) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Boost) {
		toSerialize["boost"] = o.Boost
	}
	if !IsNil(o.CaseInsensitive) {
		toSerialize["case_insensitive"] = o.CaseInsensitive
	}
	if !IsNil(o.Value) {
		toSerialize["value"] = o.Value
	}
	return toSerialize, nil
}

type NullableMetaTermQueryForSDK struct {
	value *MetaTermQueryForSDK
	isSet bool
}

func (v NullableMetaTermQueryForSDK) Get() *MetaTermQueryForSDK {
	return v.value
}

func (v *NullableMetaTermQueryForSDK) Set(val *MetaTermQueryForSDK) {
	v.value = val
	v.isSet = true
}

func (v NullableMetaTermQueryForSDK) IsSet() bool {
	return v.isSet
}

func (v *NullableMetaTermQueryForSDK) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMetaTermQueryForSDK(val *MetaTermQueryForSDK) *NullableMetaTermQueryForSDK {
	return &NullableMetaTermQueryForSDK{value: val, isSet: true}
}

func (v NullableMetaTermQueryForSDK) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMetaTermQueryForSDK) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
