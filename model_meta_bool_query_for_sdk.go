/*
Zinc Search engine API

Zinc Search engine API documents https://zincsearch-docs.zinc.dev

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the MetaBoolQueryForSDK type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MetaBoolQueryForSDK{}

// MetaBoolQueryForSDK struct for MetaBoolQueryForSDK
type MetaBoolQueryForSDK struct {
	// query, [query1, query2]
	Filter []MetaQueryForSDK `json:"filter,omitempty"`
	// only for should
	MinimumShouldMatch *float32 `json:"minimum_should_match,omitempty"`
	// query, [query1, query2]
	Must []MetaQueryForSDK `json:"must,omitempty"`
	// query, [query1, query2]
	MustNot []MetaQueryForSDK `json:"must_not,omitempty"`
	// query, [query1, query2]
	Should []MetaQueryForSDK `json:"should,omitempty"`
}

// NewMetaBoolQueryForSDK instantiates a new MetaBoolQueryForSDK object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMetaBoolQueryForSDK() *MetaBoolQueryForSDK {
	this := MetaBoolQueryForSDK{}
	return &this
}

// NewMetaBoolQueryForSDKWithDefaults instantiates a new MetaBoolQueryForSDK object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMetaBoolQueryForSDKWithDefaults() *MetaBoolQueryForSDK {
	this := MetaBoolQueryForSDK{}
	return &this
}

// GetFilter returns the Filter field value if set, zero value otherwise.
func (o *MetaBoolQueryForSDK) GetFilter() []MetaQueryForSDK {
	if o == nil || IsNil(o.Filter) {
		var ret []MetaQueryForSDK
		return ret
	}
	return o.Filter
}

// GetFilterOk returns a tuple with the Filter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MetaBoolQueryForSDK) GetFilterOk() ([]MetaQueryForSDK, bool) {
	if o == nil || IsNil(o.Filter) {
		return nil, false
	}
	return o.Filter, true
}

// HasFilter returns a boolean if a field has been set.
func (o *MetaBoolQueryForSDK) HasFilter() bool {
	if o != nil && !IsNil(o.Filter) {
		return true
	}

	return false
}

// SetFilter gets a reference to the given []MetaQueryForSDK and assigns it to the Filter field.
func (o *MetaBoolQueryForSDK) SetFilter(v []MetaQueryForSDK) {
	o.Filter = v
}

// GetMinimumShouldMatch returns the MinimumShouldMatch field value if set, zero value otherwise.
func (o *MetaBoolQueryForSDK) GetMinimumShouldMatch() float32 {
	if o == nil || IsNil(o.MinimumShouldMatch) {
		var ret float32
		return ret
	}
	return *o.MinimumShouldMatch
}

// GetMinimumShouldMatchOk returns a tuple with the MinimumShouldMatch field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MetaBoolQueryForSDK) GetMinimumShouldMatchOk() (*float32, bool) {
	if o == nil || IsNil(o.MinimumShouldMatch) {
		return nil, false
	}
	return o.MinimumShouldMatch, true
}

// HasMinimumShouldMatch returns a boolean if a field has been set.
func (o *MetaBoolQueryForSDK) HasMinimumShouldMatch() bool {
	if o != nil && !IsNil(o.MinimumShouldMatch) {
		return true
	}

	return false
}

// SetMinimumShouldMatch gets a reference to the given float32 and assigns it to the MinimumShouldMatch field.
func (o *MetaBoolQueryForSDK) SetMinimumShouldMatch(v float32) {
	o.MinimumShouldMatch = &v
}

// GetMust returns the Must field value if set, zero value otherwise.
func (o *MetaBoolQueryForSDK) GetMust() []MetaQueryForSDK {
	if o == nil || IsNil(o.Must) {
		var ret []MetaQueryForSDK
		return ret
	}
	return o.Must
}

// GetMustOk returns a tuple with the Must field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MetaBoolQueryForSDK) GetMustOk() ([]MetaQueryForSDK, bool) {
	if o == nil || IsNil(o.Must) {
		return nil, false
	}
	return o.Must, true
}

// HasMust returns a boolean if a field has been set.
func (o *MetaBoolQueryForSDK) HasMust() bool {
	if o != nil && !IsNil(o.Must) {
		return true
	}

	return false
}

// SetMust gets a reference to the given []MetaQueryForSDK and assigns it to the Must field.
func (o *MetaBoolQueryForSDK) SetMust(v []MetaQueryForSDK) {
	o.Must = v
}

// GetMustNot returns the MustNot field value if set, zero value otherwise.
func (o *MetaBoolQueryForSDK) GetMustNot() []MetaQueryForSDK {
	if o == nil || IsNil(o.MustNot) {
		var ret []MetaQueryForSDK
		return ret
	}
	return o.MustNot
}

// GetMustNotOk returns a tuple with the MustNot field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MetaBoolQueryForSDK) GetMustNotOk() ([]MetaQueryForSDK, bool) {
	if o == nil || IsNil(o.MustNot) {
		return nil, false
	}
	return o.MustNot, true
}

// HasMustNot returns a boolean if a field has been set.
func (o *MetaBoolQueryForSDK) HasMustNot() bool {
	if o != nil && !IsNil(o.MustNot) {
		return true
	}

	return false
}

// SetMustNot gets a reference to the given []MetaQueryForSDK and assigns it to the MustNot field.
func (o *MetaBoolQueryForSDK) SetMustNot(v []MetaQueryForSDK) {
	o.MustNot = v
}

// GetShould returns the Should field value if set, zero value otherwise.
func (o *MetaBoolQueryForSDK) GetShould() []MetaQueryForSDK {
	if o == nil || IsNil(o.Should) {
		var ret []MetaQueryForSDK
		return ret
	}
	return o.Should
}

// GetShouldOk returns a tuple with the Should field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MetaBoolQueryForSDK) GetShouldOk() ([]MetaQueryForSDK, bool) {
	if o == nil || IsNil(o.Should) {
		return nil, false
	}
	return o.Should, true
}

// HasShould returns a boolean if a field has been set.
func (o *MetaBoolQueryForSDK) HasShould() bool {
	if o != nil && !IsNil(o.Should) {
		return true
	}

	return false
}

// SetShould gets a reference to the given []MetaQueryForSDK and assigns it to the Should field.
func (o *MetaBoolQueryForSDK) SetShould(v []MetaQueryForSDK) {
	o.Should = v
}

func (o MetaBoolQueryForSDK) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MetaBoolQueryForSDK) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Filter) {
		toSerialize["filter"] = o.Filter
	}
	if !IsNil(o.MinimumShouldMatch) {
		toSerialize["minimum_should_match"] = o.MinimumShouldMatch
	}
	if !IsNil(o.Must) {
		toSerialize["must"] = o.Must
	}
	if !IsNil(o.MustNot) {
		toSerialize["must_not"] = o.MustNot
	}
	if !IsNil(o.Should) {
		toSerialize["should"] = o.Should
	}
	return toSerialize, nil
}

type NullableMetaBoolQueryForSDK struct {
	value *MetaBoolQueryForSDK
	isSet bool
}

func (v NullableMetaBoolQueryForSDK) Get() *MetaBoolQueryForSDK {
	return v.value
}

func (v *NullableMetaBoolQueryForSDK) Set(val *MetaBoolQueryForSDK) {
	v.value = val
	v.isSet = true
}

func (v NullableMetaBoolQueryForSDK) IsSet() bool {
	return v.isSet
}

func (v *NullableMetaBoolQueryForSDK) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMetaBoolQueryForSDK(val *MetaBoolQueryForSDK) *NullableMetaBoolQueryForSDK {
	return &NullableMetaBoolQueryForSDK{value: val, isSet: true}
}

func (v NullableMetaBoolQueryForSDK) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMetaBoolQueryForSDK) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
