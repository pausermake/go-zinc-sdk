/*
Zinc Search engine API

Zinc Search engine API documents https://zincsearch-docs.zinc.dev

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the MetaAggregations type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MetaAggregations{}

// MetaAggregations struct for MetaAggregations
type MetaAggregations struct {
	// nested aggregations
	Aggs              *map[string]MetaAggregations      `json:"aggs,omitempty"`
	AutoDateHistogram *MetaAggregationAutoDateHistogram `json:"auto_date_histogram,omitempty"`
	Avg               *MetaAggregationMetric            `json:"avg,omitempty"`
	Cardinality       *MetaAggregationMetric            `json:"cardinality,omitempty"`
	Count             *MetaAggregationMetric            `json:"count,omitempty"`
	DateHistogram     *MetaAggregationDateHistogram     `json:"date_histogram,omitempty"`
	DateRange         *MetaAggregationDateRange         `json:"date_range,omitempty"`
	Histogram         *MetaAggregationHistogram         `json:"histogram,omitempty"`
	// TODO: not implemented
	IpRange     *MetaAggregationIPRange `json:"ip_range,omitempty"`
	Max         *MetaAggregationMetric  `json:"max,omitempty"`
	Min         *MetaAggregationMetric  `json:"min,omitempty"`
	Range       *MetaAggregationRange   `json:"range,omitempty"`
	Sum         *MetaAggregationMetric  `json:"sum,omitempty"`
	Terms       *MetaAggregationsTerms  `json:"terms,omitempty"`
	WeightedAvg *MetaAggregationMetric  `json:"weighted_avg,omitempty"`
}

// NewMetaAggregations instantiates a new MetaAggregations object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMetaAggregations() *MetaAggregations {
	this := MetaAggregations{}
	return &this
}

// NewMetaAggregationsWithDefaults instantiates a new MetaAggregations object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMetaAggregationsWithDefaults() *MetaAggregations {
	this := MetaAggregations{}
	return &this
}

// GetAggs returns the Aggs field value if set, zero value otherwise.
func (o *MetaAggregations) GetAggs() map[string]MetaAggregations {
	if o == nil || IsNil(o.Aggs) {
		var ret map[string]MetaAggregations
		return ret
	}
	return *o.Aggs
}

// GetAggsOk returns a tuple with the Aggs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MetaAggregations) GetAggsOk() (*map[string]MetaAggregations, bool) {
	if o == nil || IsNil(o.Aggs) {
		return nil, false
	}
	return o.Aggs, true
}

// HasAggs returns a boolean if a field has been set.
func (o *MetaAggregations) HasAggs() bool {
	if o != nil && !IsNil(o.Aggs) {
		return true
	}

	return false
}

// SetAggs gets a reference to the given map[string]MetaAggregations and assigns it to the Aggs field.
func (o *MetaAggregations) SetAggs(v map[string]MetaAggregations) {
	o.Aggs = &v
}

// GetAutoDateHistogram returns the AutoDateHistogram field value if set, zero value otherwise.
func (o *MetaAggregations) GetAutoDateHistogram() MetaAggregationAutoDateHistogram {
	if o == nil || IsNil(o.AutoDateHistogram) {
		var ret MetaAggregationAutoDateHistogram
		return ret
	}
	return *o.AutoDateHistogram
}

// GetAutoDateHistogramOk returns a tuple with the AutoDateHistogram field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MetaAggregations) GetAutoDateHistogramOk() (*MetaAggregationAutoDateHistogram, bool) {
	if o == nil || IsNil(o.AutoDateHistogram) {
		return nil, false
	}
	return o.AutoDateHistogram, true
}

// HasAutoDateHistogram returns a boolean if a field has been set.
func (o *MetaAggregations) HasAutoDateHistogram() bool {
	if o != nil && !IsNil(o.AutoDateHistogram) {
		return true
	}

	return false
}

// SetAutoDateHistogram gets a reference to the given MetaAggregationAutoDateHistogram and assigns it to the AutoDateHistogram field.
func (o *MetaAggregations) SetAutoDateHistogram(v MetaAggregationAutoDateHistogram) {
	o.AutoDateHistogram = &v
}

// GetAvg returns the Avg field value if set, zero value otherwise.
func (o *MetaAggregations) GetAvg() MetaAggregationMetric {
	if o == nil || IsNil(o.Avg) {
		var ret MetaAggregationMetric
		return ret
	}
	return *o.Avg
}

// GetAvgOk returns a tuple with the Avg field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MetaAggregations) GetAvgOk() (*MetaAggregationMetric, bool) {
	if o == nil || IsNil(o.Avg) {
		return nil, false
	}
	return o.Avg, true
}

// HasAvg returns a boolean if a field has been set.
func (o *MetaAggregations) HasAvg() bool {
	if o != nil && !IsNil(o.Avg) {
		return true
	}

	return false
}

// SetAvg gets a reference to the given MetaAggregationMetric and assigns it to the Avg field.
func (o *MetaAggregations) SetAvg(v MetaAggregationMetric) {
	o.Avg = &v
}

// GetCardinality returns the Cardinality field value if set, zero value otherwise.
func (o *MetaAggregations) GetCardinality() MetaAggregationMetric {
	if o == nil || IsNil(o.Cardinality) {
		var ret MetaAggregationMetric
		return ret
	}
	return *o.Cardinality
}

// GetCardinalityOk returns a tuple with the Cardinality field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MetaAggregations) GetCardinalityOk() (*MetaAggregationMetric, bool) {
	if o == nil || IsNil(o.Cardinality) {
		return nil, false
	}
	return o.Cardinality, true
}

// HasCardinality returns a boolean if a field has been set.
func (o *MetaAggregations) HasCardinality() bool {
	if o != nil && !IsNil(o.Cardinality) {
		return true
	}

	return false
}

// SetCardinality gets a reference to the given MetaAggregationMetric and assigns it to the Cardinality field.
func (o *MetaAggregations) SetCardinality(v MetaAggregationMetric) {
	o.Cardinality = &v
}

// GetCount returns the Count field value if set, zero value otherwise.
func (o *MetaAggregations) GetCount() MetaAggregationMetric {
	if o == nil || IsNil(o.Count) {
		var ret MetaAggregationMetric
		return ret
	}
	return *o.Count
}

// GetCountOk returns a tuple with the Count field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MetaAggregations) GetCountOk() (*MetaAggregationMetric, bool) {
	if o == nil || IsNil(o.Count) {
		return nil, false
	}
	return o.Count, true
}

// HasCount returns a boolean if a field has been set.
func (o *MetaAggregations) HasCount() bool {
	if o != nil && !IsNil(o.Count) {
		return true
	}

	return false
}

// SetCount gets a reference to the given MetaAggregationMetric and assigns it to the Count field.
func (o *MetaAggregations) SetCount(v MetaAggregationMetric) {
	o.Count = &v
}

// GetDateHistogram returns the DateHistogram field value if set, zero value otherwise.
func (o *MetaAggregations) GetDateHistogram() MetaAggregationDateHistogram {
	if o == nil || IsNil(o.DateHistogram) {
		var ret MetaAggregationDateHistogram
		return ret
	}
	return *o.DateHistogram
}

// GetDateHistogramOk returns a tuple with the DateHistogram field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MetaAggregations) GetDateHistogramOk() (*MetaAggregationDateHistogram, bool) {
	if o == nil || IsNil(o.DateHistogram) {
		return nil, false
	}
	return o.DateHistogram, true
}

// HasDateHistogram returns a boolean if a field has been set.
func (o *MetaAggregations) HasDateHistogram() bool {
	if o != nil && !IsNil(o.DateHistogram) {
		return true
	}

	return false
}

// SetDateHistogram gets a reference to the given MetaAggregationDateHistogram and assigns it to the DateHistogram field.
func (o *MetaAggregations) SetDateHistogram(v MetaAggregationDateHistogram) {
	o.DateHistogram = &v
}

// GetDateRange returns the DateRange field value if set, zero value otherwise.
func (o *MetaAggregations) GetDateRange() MetaAggregationDateRange {
	if o == nil || IsNil(o.DateRange) {
		var ret MetaAggregationDateRange
		return ret
	}
	return *o.DateRange
}

// GetDateRangeOk returns a tuple with the DateRange field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MetaAggregations) GetDateRangeOk() (*MetaAggregationDateRange, bool) {
	if o == nil || IsNil(o.DateRange) {
		return nil, false
	}
	return o.DateRange, true
}

// HasDateRange returns a boolean if a field has been set.
func (o *MetaAggregations) HasDateRange() bool {
	if o != nil && !IsNil(o.DateRange) {
		return true
	}

	return false
}

// SetDateRange gets a reference to the given MetaAggregationDateRange and assigns it to the DateRange field.
func (o *MetaAggregations) SetDateRange(v MetaAggregationDateRange) {
	o.DateRange = &v
}

// GetHistogram returns the Histogram field value if set, zero value otherwise.
func (o *MetaAggregations) GetHistogram() MetaAggregationHistogram {
	if o == nil || IsNil(o.Histogram) {
		var ret MetaAggregationHistogram
		return ret
	}
	return *o.Histogram
}

// GetHistogramOk returns a tuple with the Histogram field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MetaAggregations) GetHistogramOk() (*MetaAggregationHistogram, bool) {
	if o == nil || IsNil(o.Histogram) {
		return nil, false
	}
	return o.Histogram, true
}

// HasHistogram returns a boolean if a field has been set.
func (o *MetaAggregations) HasHistogram() bool {
	if o != nil && !IsNil(o.Histogram) {
		return true
	}

	return false
}

// SetHistogram gets a reference to the given MetaAggregationHistogram and assigns it to the Histogram field.
func (o *MetaAggregations) SetHistogram(v MetaAggregationHistogram) {
	o.Histogram = &v
}

// GetIpRange returns the IpRange field value if set, zero value otherwise.
func (o *MetaAggregations) GetIpRange() MetaAggregationIPRange {
	if o == nil || IsNil(o.IpRange) {
		var ret MetaAggregationIPRange
		return ret
	}
	return *o.IpRange
}

// GetIpRangeOk returns a tuple with the IpRange field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MetaAggregations) GetIpRangeOk() (*MetaAggregationIPRange, bool) {
	if o == nil || IsNil(o.IpRange) {
		return nil, false
	}
	return o.IpRange, true
}

// HasIpRange returns a boolean if a field has been set.
func (o *MetaAggregations) HasIpRange() bool {
	if o != nil && !IsNil(o.IpRange) {
		return true
	}

	return false
}

// SetIpRange gets a reference to the given MetaAggregationIPRange and assigns it to the IpRange field.
func (o *MetaAggregations) SetIpRange(v MetaAggregationIPRange) {
	o.IpRange = &v
}

// GetMax returns the Max field value if set, zero value otherwise.
func (o *MetaAggregations) GetMax() MetaAggregationMetric {
	if o == nil || IsNil(o.Max) {
		var ret MetaAggregationMetric
		return ret
	}
	return *o.Max
}

// GetMaxOk returns a tuple with the Max field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MetaAggregations) GetMaxOk() (*MetaAggregationMetric, bool) {
	if o == nil || IsNil(o.Max) {
		return nil, false
	}
	return o.Max, true
}

// HasMax returns a boolean if a field has been set.
func (o *MetaAggregations) HasMax() bool {
	if o != nil && !IsNil(o.Max) {
		return true
	}

	return false
}

// SetMax gets a reference to the given MetaAggregationMetric and assigns it to the Max field.
func (o *MetaAggregations) SetMax(v MetaAggregationMetric) {
	o.Max = &v
}

// GetMin returns the Min field value if set, zero value otherwise.
func (o *MetaAggregations) GetMin() MetaAggregationMetric {
	if o == nil || IsNil(o.Min) {
		var ret MetaAggregationMetric
		return ret
	}
	return *o.Min
}

// GetMinOk returns a tuple with the Min field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MetaAggregations) GetMinOk() (*MetaAggregationMetric, bool) {
	if o == nil || IsNil(o.Min) {
		return nil, false
	}
	return o.Min, true
}

// HasMin returns a boolean if a field has been set.
func (o *MetaAggregations) HasMin() bool {
	if o != nil && !IsNil(o.Min) {
		return true
	}

	return false
}

// SetMin gets a reference to the given MetaAggregationMetric and assigns it to the Min field.
func (o *MetaAggregations) SetMin(v MetaAggregationMetric) {
	o.Min = &v
}

// GetRange returns the Range field value if set, zero value otherwise.
func (o *MetaAggregations) GetRange() MetaAggregationRange {
	if o == nil || IsNil(o.Range) {
		var ret MetaAggregationRange
		return ret
	}
	return *o.Range
}

// GetRangeOk returns a tuple with the Range field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MetaAggregations) GetRangeOk() (*MetaAggregationRange, bool) {
	if o == nil || IsNil(o.Range) {
		return nil, false
	}
	return o.Range, true
}

// HasRange returns a boolean if a field has been set.
func (o *MetaAggregations) HasRange() bool {
	if o != nil && !IsNil(o.Range) {
		return true
	}

	return false
}

// SetRange gets a reference to the given MetaAggregationRange and assigns it to the Range field.
func (o *MetaAggregations) SetRange(v MetaAggregationRange) {
	o.Range = &v
}

// GetSum returns the Sum field value if set, zero value otherwise.
func (o *MetaAggregations) GetSum() MetaAggregationMetric {
	if o == nil || IsNil(o.Sum) {
		var ret MetaAggregationMetric
		return ret
	}
	return *o.Sum
}

// GetSumOk returns a tuple with the Sum field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MetaAggregations) GetSumOk() (*MetaAggregationMetric, bool) {
	if o == nil || IsNil(o.Sum) {
		return nil, false
	}
	return o.Sum, true
}

// HasSum returns a boolean if a field has been set.
func (o *MetaAggregations) HasSum() bool {
	if o != nil && !IsNil(o.Sum) {
		return true
	}

	return false
}

// SetSum gets a reference to the given MetaAggregationMetric and assigns it to the Sum field.
func (o *MetaAggregations) SetSum(v MetaAggregationMetric) {
	o.Sum = &v
}

// GetTerms returns the Terms field value if set, zero value otherwise.
func (o *MetaAggregations) GetTerms() MetaAggregationsTerms {
	if o == nil || IsNil(o.Terms) {
		var ret MetaAggregationsTerms
		return ret
	}
	return *o.Terms
}

// GetTermsOk returns a tuple with the Terms field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MetaAggregations) GetTermsOk() (*MetaAggregationsTerms, bool) {
	if o == nil || IsNil(o.Terms) {
		return nil, false
	}
	return o.Terms, true
}

// HasTerms returns a boolean if a field has been set.
func (o *MetaAggregations) HasTerms() bool {
	if o != nil && !IsNil(o.Terms) {
		return true
	}

	return false
}

// SetTerms gets a reference to the given MetaAggregationsTerms and assigns it to the Terms field.
func (o *MetaAggregations) SetTerms(v MetaAggregationsTerms) {
	o.Terms = &v
}

// GetWeightedAvg returns the WeightedAvg field value if set, zero value otherwise.
func (o *MetaAggregations) GetWeightedAvg() MetaAggregationMetric {
	if o == nil || IsNil(o.WeightedAvg) {
		var ret MetaAggregationMetric
		return ret
	}
	return *o.WeightedAvg
}

// GetWeightedAvgOk returns a tuple with the WeightedAvg field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MetaAggregations) GetWeightedAvgOk() (*MetaAggregationMetric, bool) {
	if o == nil || IsNil(o.WeightedAvg) {
		return nil, false
	}
	return o.WeightedAvg, true
}

// HasWeightedAvg returns a boolean if a field has been set.
func (o *MetaAggregations) HasWeightedAvg() bool {
	if o != nil && !IsNil(o.WeightedAvg) {
		return true
	}

	return false
}

// SetWeightedAvg gets a reference to the given MetaAggregationMetric and assigns it to the WeightedAvg field.
func (o *MetaAggregations) SetWeightedAvg(v MetaAggregationMetric) {
	o.WeightedAvg = &v
}

func (o MetaAggregations) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MetaAggregations) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Aggs) {
		toSerialize["aggs"] = o.Aggs
	}
	if !IsNil(o.AutoDateHistogram) {
		toSerialize["auto_date_histogram"] = o.AutoDateHistogram
	}
	if !IsNil(o.Avg) {
		toSerialize["avg"] = o.Avg
	}
	if !IsNil(o.Cardinality) {
		toSerialize["cardinality"] = o.Cardinality
	}
	if !IsNil(o.Count) {
		toSerialize["count"] = o.Count
	}
	if !IsNil(o.DateHistogram) {
		toSerialize["date_histogram"] = o.DateHistogram
	}
	if !IsNil(o.DateRange) {
		toSerialize["date_range"] = o.DateRange
	}
	if !IsNil(o.Histogram) {
		toSerialize["histogram"] = o.Histogram
	}
	if !IsNil(o.IpRange) {
		toSerialize["ip_range"] = o.IpRange
	}
	if !IsNil(o.Max) {
		toSerialize["max"] = o.Max
	}
	if !IsNil(o.Min) {
		toSerialize["min"] = o.Min
	}
	if !IsNil(o.Range) {
		toSerialize["range"] = o.Range
	}
	if !IsNil(o.Sum) {
		toSerialize["sum"] = o.Sum
	}
	if !IsNil(o.Terms) {
		toSerialize["terms"] = o.Terms
	}
	if !IsNil(o.WeightedAvg) {
		toSerialize["weighted_avg"] = o.WeightedAvg
	}
	return toSerialize, nil
}

type NullableMetaAggregations struct {
	value *MetaAggregations
	isSet bool
}

func (v NullableMetaAggregations) Get() *MetaAggregations {
	return v.value
}

func (v *NullableMetaAggregations) Set(val *MetaAggregations) {
	v.value = val
	v.isSet = true
}

func (v NullableMetaAggregations) IsSet() bool {
	return v.isSet
}

func (v *NullableMetaAggregations) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMetaAggregations(val *MetaAggregations) *NullableMetaAggregations {
	return &NullableMetaAggregations{value: val, isSet: true}
}

func (v NullableMetaAggregations) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMetaAggregations) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
