/*
Zinc Search engine API

Zinc Search engine API documents https://zincsearch-docs.zinc.dev

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the MetaHTTPResponseDeleteByQuery type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MetaHTTPResponseDeleteByQuery{}

// MetaHTTPResponseDeleteByQuery struct for MetaHTTPResponseDeleteByQuery
type MetaHTTPResponseDeleteByQuery struct {
	Batches              *int32                   `json:"batches,omitempty"`
	Deleted              *int32                   `json:"deleted,omitempty"`
	Failures             []string                 `json:"failures,omitempty"`
	Noops                *int32                   `json:"noops,omitempty"`
	RequestsPerSecond    *int32                   `json:"requests_per_second,omitempty"`
	Retries              *MetaHttpRetriesResponse `json:"retries,omitempty"`
	ThrottledMillis      *int32                   `json:"throttled_millis,omitempty"`
	ThrottledUntilMillis *int32                   `json:"throttled_until_millis,omitempty"`
	TimeOut              *bool                    `json:"time_out,omitempty"`
	Took                 *int32                   `json:"took,omitempty"`
	Total                *int32                   `json:"total,omitempty"`
	VersionConflicts     *int32                   `json:"version_conflicts,omitempty"`
}

// NewMetaHTTPResponseDeleteByQuery instantiates a new MetaHTTPResponseDeleteByQuery object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMetaHTTPResponseDeleteByQuery() *MetaHTTPResponseDeleteByQuery {
	this := MetaHTTPResponseDeleteByQuery{}
	return &this
}

// NewMetaHTTPResponseDeleteByQueryWithDefaults instantiates a new MetaHTTPResponseDeleteByQuery object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMetaHTTPResponseDeleteByQueryWithDefaults() *MetaHTTPResponseDeleteByQuery {
	this := MetaHTTPResponseDeleteByQuery{}
	return &this
}

// GetBatches returns the Batches field value if set, zero value otherwise.
func (o *MetaHTTPResponseDeleteByQuery) GetBatches() int32 {
	if o == nil || IsNil(o.Batches) {
		var ret int32
		return ret
	}
	return *o.Batches
}

// GetBatchesOk returns a tuple with the Batches field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MetaHTTPResponseDeleteByQuery) GetBatchesOk() (*int32, bool) {
	if o == nil || IsNil(o.Batches) {
		return nil, false
	}
	return o.Batches, true
}

// HasBatches returns a boolean if a field has been set.
func (o *MetaHTTPResponseDeleteByQuery) HasBatches() bool {
	if o != nil && !IsNil(o.Batches) {
		return true
	}

	return false
}

// SetBatches gets a reference to the given int32 and assigns it to the Batches field.
func (o *MetaHTTPResponseDeleteByQuery) SetBatches(v int32) {
	o.Batches = &v
}

// GetDeleted returns the Deleted field value if set, zero value otherwise.
func (o *MetaHTTPResponseDeleteByQuery) GetDeleted() int32 {
	if o == nil || IsNil(o.Deleted) {
		var ret int32
		return ret
	}
	return *o.Deleted
}

// GetDeletedOk returns a tuple with the Deleted field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MetaHTTPResponseDeleteByQuery) GetDeletedOk() (*int32, bool) {
	if o == nil || IsNil(o.Deleted) {
		return nil, false
	}
	return o.Deleted, true
}

// HasDeleted returns a boolean if a field has been set.
func (o *MetaHTTPResponseDeleteByQuery) HasDeleted() bool {
	if o != nil && !IsNil(o.Deleted) {
		return true
	}

	return false
}

// SetDeleted gets a reference to the given int32 and assigns it to the Deleted field.
func (o *MetaHTTPResponseDeleteByQuery) SetDeleted(v int32) {
	o.Deleted = &v
}

// GetFailures returns the Failures field value if set, zero value otherwise.
func (o *MetaHTTPResponseDeleteByQuery) GetFailures() []string {
	if o == nil || IsNil(o.Failures) {
		var ret []string
		return ret
	}
	return o.Failures
}

// GetFailuresOk returns a tuple with the Failures field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MetaHTTPResponseDeleteByQuery) GetFailuresOk() ([]string, bool) {
	if o == nil || IsNil(o.Failures) {
		return nil, false
	}
	return o.Failures, true
}

// HasFailures returns a boolean if a field has been set.
func (o *MetaHTTPResponseDeleteByQuery) HasFailures() bool {
	if o != nil && !IsNil(o.Failures) {
		return true
	}

	return false
}

// SetFailures gets a reference to the given []string and assigns it to the Failures field.
func (o *MetaHTTPResponseDeleteByQuery) SetFailures(v []string) {
	o.Failures = v
}

// GetNoops returns the Noops field value if set, zero value otherwise.
func (o *MetaHTTPResponseDeleteByQuery) GetNoops() int32 {
	if o == nil || IsNil(o.Noops) {
		var ret int32
		return ret
	}
	return *o.Noops
}

// GetNoopsOk returns a tuple with the Noops field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MetaHTTPResponseDeleteByQuery) GetNoopsOk() (*int32, bool) {
	if o == nil || IsNil(o.Noops) {
		return nil, false
	}
	return o.Noops, true
}

// HasNoops returns a boolean if a field has been set.
func (o *MetaHTTPResponseDeleteByQuery) HasNoops() bool {
	if o != nil && !IsNil(o.Noops) {
		return true
	}

	return false
}

// SetNoops gets a reference to the given int32 and assigns it to the Noops field.
func (o *MetaHTTPResponseDeleteByQuery) SetNoops(v int32) {
	o.Noops = &v
}

// GetRequestsPerSecond returns the RequestsPerSecond field value if set, zero value otherwise.
func (o *MetaHTTPResponseDeleteByQuery) GetRequestsPerSecond() int32 {
	if o == nil || IsNil(o.RequestsPerSecond) {
		var ret int32
		return ret
	}
	return *o.RequestsPerSecond
}

// GetRequestsPerSecondOk returns a tuple with the RequestsPerSecond field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MetaHTTPResponseDeleteByQuery) GetRequestsPerSecondOk() (*int32, bool) {
	if o == nil || IsNil(o.RequestsPerSecond) {
		return nil, false
	}
	return o.RequestsPerSecond, true
}

// HasRequestsPerSecond returns a boolean if a field has been set.
func (o *MetaHTTPResponseDeleteByQuery) HasRequestsPerSecond() bool {
	if o != nil && !IsNil(o.RequestsPerSecond) {
		return true
	}

	return false
}

// SetRequestsPerSecond gets a reference to the given int32 and assigns it to the RequestsPerSecond field.
func (o *MetaHTTPResponseDeleteByQuery) SetRequestsPerSecond(v int32) {
	o.RequestsPerSecond = &v
}

// GetRetries returns the Retries field value if set, zero value otherwise.
func (o *MetaHTTPResponseDeleteByQuery) GetRetries() MetaHttpRetriesResponse {
	if o == nil || IsNil(o.Retries) {
		var ret MetaHttpRetriesResponse
		return ret
	}
	return *o.Retries
}

// GetRetriesOk returns a tuple with the Retries field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MetaHTTPResponseDeleteByQuery) GetRetriesOk() (*MetaHttpRetriesResponse, bool) {
	if o == nil || IsNil(o.Retries) {
		return nil, false
	}
	return o.Retries, true
}

// HasRetries returns a boolean if a field has been set.
func (o *MetaHTTPResponseDeleteByQuery) HasRetries() bool {
	if o != nil && !IsNil(o.Retries) {
		return true
	}

	return false
}

// SetRetries gets a reference to the given MetaHttpRetriesResponse and assigns it to the Retries field.
func (o *MetaHTTPResponseDeleteByQuery) SetRetries(v MetaHttpRetriesResponse) {
	o.Retries = &v
}

// GetThrottledMillis returns the ThrottledMillis field value if set, zero value otherwise.
func (o *MetaHTTPResponseDeleteByQuery) GetThrottledMillis() int32 {
	if o == nil || IsNil(o.ThrottledMillis) {
		var ret int32
		return ret
	}
	return *o.ThrottledMillis
}

// GetThrottledMillisOk returns a tuple with the ThrottledMillis field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MetaHTTPResponseDeleteByQuery) GetThrottledMillisOk() (*int32, bool) {
	if o == nil || IsNil(o.ThrottledMillis) {
		return nil, false
	}
	return o.ThrottledMillis, true
}

// HasThrottledMillis returns a boolean if a field has been set.
func (o *MetaHTTPResponseDeleteByQuery) HasThrottledMillis() bool {
	if o != nil && !IsNil(o.ThrottledMillis) {
		return true
	}

	return false
}

// SetThrottledMillis gets a reference to the given int32 and assigns it to the ThrottledMillis field.
func (o *MetaHTTPResponseDeleteByQuery) SetThrottledMillis(v int32) {
	o.ThrottledMillis = &v
}

// GetThrottledUntilMillis returns the ThrottledUntilMillis field value if set, zero value otherwise.
func (o *MetaHTTPResponseDeleteByQuery) GetThrottledUntilMillis() int32 {
	if o == nil || IsNil(o.ThrottledUntilMillis) {
		var ret int32
		return ret
	}
	return *o.ThrottledUntilMillis
}

// GetThrottledUntilMillisOk returns a tuple with the ThrottledUntilMillis field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MetaHTTPResponseDeleteByQuery) GetThrottledUntilMillisOk() (*int32, bool) {
	if o == nil || IsNil(o.ThrottledUntilMillis) {
		return nil, false
	}
	return o.ThrottledUntilMillis, true
}

// HasThrottledUntilMillis returns a boolean if a field has been set.
func (o *MetaHTTPResponseDeleteByQuery) HasThrottledUntilMillis() bool {
	if o != nil && !IsNil(o.ThrottledUntilMillis) {
		return true
	}

	return false
}

// SetThrottledUntilMillis gets a reference to the given int32 and assigns it to the ThrottledUntilMillis field.
func (o *MetaHTTPResponseDeleteByQuery) SetThrottledUntilMillis(v int32) {
	o.ThrottledUntilMillis = &v
}

// GetTimeOut returns the TimeOut field value if set, zero value otherwise.
func (o *MetaHTTPResponseDeleteByQuery) GetTimeOut() bool {
	if o == nil || IsNil(o.TimeOut) {
		var ret bool
		return ret
	}
	return *o.TimeOut
}

// GetTimeOutOk returns a tuple with the TimeOut field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MetaHTTPResponseDeleteByQuery) GetTimeOutOk() (*bool, bool) {
	if o == nil || IsNil(o.TimeOut) {
		return nil, false
	}
	return o.TimeOut, true
}

// HasTimeOut returns a boolean if a field has been set.
func (o *MetaHTTPResponseDeleteByQuery) HasTimeOut() bool {
	if o != nil && !IsNil(o.TimeOut) {
		return true
	}

	return false
}

// SetTimeOut gets a reference to the given bool and assigns it to the TimeOut field.
func (o *MetaHTTPResponseDeleteByQuery) SetTimeOut(v bool) {
	o.TimeOut = &v
}

// GetTook returns the Took field value if set, zero value otherwise.
func (o *MetaHTTPResponseDeleteByQuery) GetTook() int32 {
	if o == nil || IsNil(o.Took) {
		var ret int32
		return ret
	}
	return *o.Took
}

// GetTookOk returns a tuple with the Took field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MetaHTTPResponseDeleteByQuery) GetTookOk() (*int32, bool) {
	if o == nil || IsNil(o.Took) {
		return nil, false
	}
	return o.Took, true
}

// HasTook returns a boolean if a field has been set.
func (o *MetaHTTPResponseDeleteByQuery) HasTook() bool {
	if o != nil && !IsNil(o.Took) {
		return true
	}

	return false
}

// SetTook gets a reference to the given int32 and assigns it to the Took field.
func (o *MetaHTTPResponseDeleteByQuery) SetTook(v int32) {
	o.Took = &v
}

// GetTotal returns the Total field value if set, zero value otherwise.
func (o *MetaHTTPResponseDeleteByQuery) GetTotal() int32 {
	if o == nil || IsNil(o.Total) {
		var ret int32
		return ret
	}
	return *o.Total
}

// GetTotalOk returns a tuple with the Total field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MetaHTTPResponseDeleteByQuery) GetTotalOk() (*int32, bool) {
	if o == nil || IsNil(o.Total) {
		return nil, false
	}
	return o.Total, true
}

// HasTotal returns a boolean if a field has been set.
func (o *MetaHTTPResponseDeleteByQuery) HasTotal() bool {
	if o != nil && !IsNil(o.Total) {
		return true
	}

	return false
}

// SetTotal gets a reference to the given int32 and assigns it to the Total field.
func (o *MetaHTTPResponseDeleteByQuery) SetTotal(v int32) {
	o.Total = &v
}

// GetVersionConflicts returns the VersionConflicts field value if set, zero value otherwise.
func (o *MetaHTTPResponseDeleteByQuery) GetVersionConflicts() int32 {
	if o == nil || IsNil(o.VersionConflicts) {
		var ret int32
		return ret
	}
	return *o.VersionConflicts
}

// GetVersionConflictsOk returns a tuple with the VersionConflicts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MetaHTTPResponseDeleteByQuery) GetVersionConflictsOk() (*int32, bool) {
	if o == nil || IsNil(o.VersionConflicts) {
		return nil, false
	}
	return o.VersionConflicts, true
}

// HasVersionConflicts returns a boolean if a field has been set.
func (o *MetaHTTPResponseDeleteByQuery) HasVersionConflicts() bool {
	if o != nil && !IsNil(o.VersionConflicts) {
		return true
	}

	return false
}

// SetVersionConflicts gets a reference to the given int32 and assigns it to the VersionConflicts field.
func (o *MetaHTTPResponseDeleteByQuery) SetVersionConflicts(v int32) {
	o.VersionConflicts = &v
}

func (o MetaHTTPResponseDeleteByQuery) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MetaHTTPResponseDeleteByQuery) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Batches) {
		toSerialize["batches"] = o.Batches
	}
	if !IsNil(o.Deleted) {
		toSerialize["deleted"] = o.Deleted
	}
	if !IsNil(o.Failures) {
		toSerialize["failures"] = o.Failures
	}
	if !IsNil(o.Noops) {
		toSerialize["noops"] = o.Noops
	}
	if !IsNil(o.RequestsPerSecond) {
		toSerialize["requests_per_second"] = o.RequestsPerSecond
	}
	if !IsNil(o.Retries) {
		toSerialize["retries"] = o.Retries
	}
	if !IsNil(o.ThrottledMillis) {
		toSerialize["throttled_millis"] = o.ThrottledMillis
	}
	if !IsNil(o.ThrottledUntilMillis) {
		toSerialize["throttled_until_millis"] = o.ThrottledUntilMillis
	}
	if !IsNil(o.TimeOut) {
		toSerialize["time_out"] = o.TimeOut
	}
	if !IsNil(o.Took) {
		toSerialize["took"] = o.Took
	}
	if !IsNil(o.Total) {
		toSerialize["total"] = o.Total
	}
	if !IsNil(o.VersionConflicts) {
		toSerialize["version_conflicts"] = o.VersionConflicts
	}
	return toSerialize, nil
}

type NullableMetaHTTPResponseDeleteByQuery struct {
	value *MetaHTTPResponseDeleteByQuery
	isSet bool
}

func (v NullableMetaHTTPResponseDeleteByQuery) Get() *MetaHTTPResponseDeleteByQuery {
	return v.value
}

func (v *NullableMetaHTTPResponseDeleteByQuery) Set(val *MetaHTTPResponseDeleteByQuery) {
	v.value = val
	v.isSet = true
}

func (v NullableMetaHTTPResponseDeleteByQuery) IsSet() bool {
	return v.isSet
}

func (v *NullableMetaHTTPResponseDeleteByQuery) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMetaHTTPResponseDeleteByQuery(val *MetaHTTPResponseDeleteByQuery) *NullableMetaHTTPResponseDeleteByQuery {
	return &NullableMetaHTTPResponseDeleteByQuery{value: val, isSet: true}
}

func (v NullableMetaHTTPResponseDeleteByQuery) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMetaHTTPResponseDeleteByQuery) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
