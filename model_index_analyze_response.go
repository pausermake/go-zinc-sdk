/*
Zinc Search engine API

Zinc Search engine API documents https://zincsearch-docs.zinc.dev

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the IndexAnalyzeResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &IndexAnalyzeResponse{}

// IndexAnalyzeResponse struct for IndexAnalyzeResponse
type IndexAnalyzeResponse struct {
	Tokens []IndexAnalyzeResponseToken `json:"tokens,omitempty"`
}

// NewIndexAnalyzeResponse instantiates a new IndexAnalyzeResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIndexAnalyzeResponse() *IndexAnalyzeResponse {
	this := IndexAnalyzeResponse{}
	return &this
}

// NewIndexAnalyzeResponseWithDefaults instantiates a new IndexAnalyzeResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIndexAnalyzeResponseWithDefaults() *IndexAnalyzeResponse {
	this := IndexAnalyzeResponse{}
	return &this
}

// GetTokens returns the Tokens field value if set, zero value otherwise.
func (o *IndexAnalyzeResponse) GetTokens() []IndexAnalyzeResponseToken {
	if o == nil || IsNil(o.Tokens) {
		var ret []IndexAnalyzeResponseToken
		return ret
	}
	return o.Tokens
}

// GetTokensOk returns a tuple with the Tokens field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IndexAnalyzeResponse) GetTokensOk() ([]IndexAnalyzeResponseToken, bool) {
	if o == nil || IsNil(o.Tokens) {
		return nil, false
	}
	return o.Tokens, true
}

// HasTokens returns a boolean if a field has been set.
func (o *IndexAnalyzeResponse) HasTokens() bool {
	if o != nil && !IsNil(o.Tokens) {
		return true
	}

	return false
}

// SetTokens gets a reference to the given []IndexAnalyzeResponseToken and assigns it to the Tokens field.
func (o *IndexAnalyzeResponse) SetTokens(v []IndexAnalyzeResponseToken) {
	o.Tokens = v
}

func (o IndexAnalyzeResponse) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o IndexAnalyzeResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Tokens) {
		toSerialize["tokens"] = o.Tokens
	}
	return toSerialize, nil
}

type NullableIndexAnalyzeResponse struct {
	value *IndexAnalyzeResponse
	isSet bool
}

func (v NullableIndexAnalyzeResponse) Get() *IndexAnalyzeResponse {
	return v.value
}

func (v *NullableIndexAnalyzeResponse) Set(val *IndexAnalyzeResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableIndexAnalyzeResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableIndexAnalyzeResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIndexAnalyzeResponse(val *IndexAnalyzeResponse) *NullableIndexAnalyzeResponse {
	return &NullableIndexAnalyzeResponse{value: val, isSet: true}
}

func (v NullableIndexAnalyzeResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIndexAnalyzeResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
